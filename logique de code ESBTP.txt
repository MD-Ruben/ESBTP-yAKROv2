1- On va faire simple déjà on doit d'abord créer la section filière qu'on va ajouter à la sidebar dans le fichier app.php, on va ensuite créer les différents niveaux d'études.
  - Tu vas créer un seeder pour créer les filières (génie civile, mine - géologie - pétrole), il y a des sous éléments à génie civile qui sont : bâtiments, travaux publics,  géomètre topographe et urbanisme
Résumé: Génie civil option BATIMENT, Génie civil option TRAVAUX PUBLICS, Génie civil option URBANISM, Génie civil option GEOMETRE-TOPOGRAPHE, MINE - GEOLOGIE - PETROLE
   - Tu vas créer un seeder maintenant pour les niveaux d'études :
         * BTS: première année BTS, deuxième année BTS.







       


Processus d'installation

Je veux un système qui permettra facilement à un utilisateur d'installer l'application sur ta machine
Il n'y a aucun prérequis déjà pour ouvrir déjà l'application il faudra déjà avoir une appli comme xampp et wampp donc déjà avoir php et apache and so on
Aucun prérequis pour l'installation
L'utilisateur devra renseigner ses infos pour la base de données, (example: host: "localhost", username: "root", password: "")
Le backend devra ensuite recupérer ces informations, se connecter à la base de données en question
Le backend devra faire les migrations direct sur la base de données
Maintenant : - S'il y a une base de données, le backend nous alerte que la base de données est déjà créé donc pas besoin de créer un fichier env. pour ça ou de le modifier if exists
             - S'il y a déjà des tables pas besoin de migration mais s'il n'y a pas toutes les tables, le système devra devra db.wipe (drop all tables) et relancer la migration like migration:fresh
Ensuite l'utilisateur crée un utilisateur superadmin
Génère une clé si elle n'est pas généré
Finalise maintenant l'application
L'utilisateur créé superadmin se connecte directement
L'utilisateur est redirigé au /Dashboard

Pour vérifier que l'installation, tu dois adapter le code pour qu'il compare le nombre de fichier de migration à faire et le nom de table si c'est égale ça veut dire que l'installation a été faite sinon ce n'est pas installé

Dans la page install/migration idem, si le nombre de migration à faire est égale au nombre de table alors l'installation est faite

-Si c'est installé on doit voir alors le bouton skip migration

N.B: une option de verification en plus il faut que dans le nom des tables il faut aussi ces noms dans les migrations ça veut dire que s'il y a une table "users" alors s'il y a un fichier de migration 00508080_create_users_table" vu qu'il y a users dans les deux ils sont égaux, et donc toutes les tables doivent être égaux aux fichiers de migrations et c'est bon

Côté base de données 
-Si la base de données n'existe pas tu ne mets pas connection database successful  tu mets juste succes parce que la base de données tu vas devoir la créer quand l'utilisateur va appuyer sur demarrer la migration

- Si la base de données exite alors tu gardes le message comme quoi la connexion est réussie vu qu'il se connecte vraiment à une base de donnée existante

- Si la base de données n'existe là tu peux mettre un autre message vu que tu ne peux pas te connecter à une base de données inexistante.




-QUand tu demarres la migration et que la base de données n'existe ne mets pas un message d'erreur mais juste la plateforme doit créer la base de données avec le nom renseigné

Recommandations pour les migrations:
Nomenclature cohérente : Maintenir une cohérence entre les noms de fichiers et les noms de tables pour éviter les confusions.
Organisation des migrations : Planifier l'ordre des migrations en tenant compte des dépendances entre les tables.
Documentation : Documenter les dépendances entre les tables pour faciliter la maintenance.
AUssi vérifie que ça ne posera pas de problème pour une bonne vérification de l'installation lors d'un git pull


-Quand le superadmin n'est pas créé alors l'app n'est pas installé, c'est une règle aussi le superadmin doit être aussi être créé pour déclarer l'app installé,
le système doit vérifier la présence d'un superadmin
Le superadmin doit être créé dans /install/admin

Les différentes roles concernant spatie: Superadmin lui qui gère toute l'application, des data enters(je ne connais pas bien leur nom si tu connais tu mets le bon nom) eux ils auront pour rôle et permission de seulement entrer des données(faire l'inscription des étudiants(ajouter des étudiants) marquer les notes des étudiants, marquer les présences des étudiants, envoyer les messages, créer les emplois du temps)
Les étudiants auront pour rôle et permissions de voir les informations les concernant

L'appli doit faire la gestion d'une université
Créer des filières, des niveaux d'études, des années universitaires, créer des classes qui regrouperont ces informations, donc les classes seront créés avec des select parce que quand tu renseignes les différentes filières, les niveaux d'études, les années universitaires tu n'as plus besoin d'informations supplémentaires pour créer une classe n'est ce pas ?
Après créer des étudiants(faire l'inscription), aussi dans l'inscription il y a la possiblité de créer un parent pour le relier à l'étudiant, s'il y a un deuxième parent tu peux ajouter le deuxième parent et tu définis les liens de parentés, père, mère et tuteur, après cela le système doit automatiquement générer un compte pour l'étudiant ajouté, username se fera avec un nom et un prénom separé par un point (format emai: prenom.nom@esbtp.com, format username: prenom.nom, le username doit être unique donc si tu génères un username et il existe déjà dans la base de données tu choisis un autre prénom ou tu ajoutes des chiffres, le mot de passe est généré automatiquement) donc quand le système crée le compte il doit afficher le username et le mot de passe pour que la personne donne à l'étudiant
L'admin et le date enters doit pouvoir voir les profils et les informations personnelles de tous les étudiants quand ils cliqueront sur eux dans la page où tu as tous les étudiants sur la page étudiant
Ils pourront envoyer des messages aux étudiants, soit ils choissisent tous les étudiants, soit des classes, soit des filières, soit des niveaux d'études, soit des étudiants en particulier, donc un select multichoix doit s'ouvrir dans un modal pour faciliter le choix de destinataire
Les étudiants verront seulement leur profil et leurs informations, emploi du temps, leurs notes, leurs absences, leurs paiements, leurs messages, leurs notifications
Le système doit avoir un système de notification pour notifier les différents activités sur l'app qui a fait l'activité et qui ça concerne en prenant en considération les différents rôles et permissions
le système doit avoir un système d'emploi du temps toujours aussi en prenant en compte les permisions et roles de chaque utilisateur
