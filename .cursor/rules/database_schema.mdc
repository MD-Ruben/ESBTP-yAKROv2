---
description: Schéma de Base de Données ESBTP
globs: 
alwaysApply: false
---
## Principales Entités

### Utilisateurs et Authentification
- **users** : Utilisateurs du système (superAdmin, secretaire, etudiant)
- **roles** : Rôles dans le système
- **permissions** : Permissions associées aux rôles
- **model_has_roles** : Table pivot pour les rôles attribués aux utilisateurs
- **model_has_permissions** : Table pivot pour les permissions attribuées aux utilisateurs

### Structure Académique
- **esbtp_filieres** : Filières d'étude (génie civil, mine - géologie - pétrole)
- **esbtp_formations** : Types de formation (générale, technologique et professionnelle)
- **esbtp_niveau_etudes** : Niveaux d'étude (BTS 1ère année, BTS 2ème année)
- **esbtp_annee_universitaires** : Années universitaires
- **esbtp_classes** : Classes combinant filière, formation et niveau d'étude
- **esbtp_matieres** : Matières enseignées
- **esbtp_matiere_filiere** : Association entre matières et filières
- **esbtp_matiere_niveau** : Association entre matières et niveaux d'étude

### Étudiants et Parents
- **esbtp_etudiants** : Étudiants inscrits
- **esbtp_parents** : Parents d'étudiants
- **esbtp_inscriptions** : Inscriptions des étudiants
- **esbtp_paiements** : Paiements effectués

### Éducation et Évaluation
- **esbtp_evaluations** : Évaluations (examens, quiz, devoirs)
- **esbtp_notes** : Notes des étudiants
- **esbtp_bulletins** : Bulletins de notes
- **esbtp_bulletin_details** : Détails des bulletins par matière
- **esbtp_cours** : Cours dispensés
- **esbtp_emploi_temps** : Emplois du temps
- **esbtp_attendances** : Présences aux cours
- **esbtp_absences** : Absences enregistrées

### Communication
- **esbtp_annonces** : Annonces destinées aux étudiants ou classes

## Relations Clés

1. **Utilisateurs et Rôles**
   - Un utilisateur a un ou plusieurs rôles
   - Un rôle a plusieurs permissions

2. **Structure des Classes**
   - Une classe appartient à une filière
   - Une classe appartient à un niveau d'étude
   - Une classe est associée à un type de formation
   - Une classe est liée à une année universitaire

3. **Étudiants et Classes**
   - Un étudiant est inscrit dans une classe
   - Un étudiant a un ou deux parents
   - Un parent peut avoir plusieurs étudiants

4. **Matières et Évaluations**
   - Une matière appartient à une filière et un niveau d'étude
   - Une matière a un coefficient pour les calculs de moyenne
   - Une évaluation concerne une matière
   - Une note est liée à un étudiant et une évaluation

5. **Emplois du Temps**
   - Un emploi du temps est associé à une classe
   - Un emploi du temps contient plusieurs cours
   - Un cours est dispensé par un enseignant pour une matière

## Configuration Prisma

### Schema Prisma

```prisma
// Exemple de schema.prisma pour ESBTP
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                Int      @id @default(autoincrement())
  name              String
  email             String   @unique
  email_verified_at DateTime?
  password          String
  role              String   @default("etudiant")
  remember_token    String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  last_login_at     DateTime?
  
  // Relations
  etudiant          ESBTPEtudiant?
  
  @@map("users")
}

model Role {
  id                Int      @id @default(autoincrement())
  name              String
  guard_name        String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  
  // Relations avec les permissions
  permissions        RoleHasPermission[]
  
  @@map("roles")
}

model Permission {
  id                Int      @id @default(autoincrement())
  name              String
  guard_name        String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  
  // Relations
  roles             RoleHasPermission[]
  
  @@map("permissions")
}

model RoleHasPermission {
  permission_id     Int
  role_id           Int
  
  // Relations
  permission        Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  role              Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  
  @@id([permission_id, role_id])
  @@map("role_has_permissions")
}

model ESBTPFiliere {
  id                Int      @id @default(autoincrement())
  nom               String
  description       String?
  active            Boolean  @default(true)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  
  // Relations
  classes           ESBTPClasse[]
  matieres          ESBTPMatiereFiliere[]
  
  @@map("esbtp_filieres")
}

model ESBTPFormation {
  id                Int      @id @default(autoincrement())
  nom               String
  description       String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  
  // Relations
  classes           ESBTPClasse[]
  
  @@map("esbtp_formations")
}

// Autres modèles à compléter selon le schéma de la base de données...
```

### Intégration avec Laravel

Pour intégrer Prisma avec Laravel:

1. **Configurer le Client Prisma**

```php
// app/Services/PrismaService.php
namespace App\Services;

class PrismaService
{
    protected $client;

    public function __construct()
    {
        // Initialiser le client Prisma
        $this->client = new \PrismaClient();
    }

    public function getClient()
    {
        return $this->client;
    }
}
```

2. **Enregistrer le Service dans un Provider**

```php
// app/Providers/PrismaServiceProvider.php
namespace App\Providers;

use Illuminate\Support\ServiceProvider;
use App\Services\PrismaService;

class PrismaServiceProvider extends ServiceProvider
{
    public function register()
    {
        $this->app->singleton(PrismaService::class, function ($app) {
            return new PrismaService();
        });
    }
}
```

3. **Utiliser le Service Prisma dans les Contrôleurs ou Services**

```php
// Exemple d'utilisation dans un contrôleur
namespace App\Http\Controllers;

use App\Services\PrismaService;

class ESBTPEtudiantController extends Controller
{
    protected $prisma;

    public function __construct(PrismaService $prismaService)
    {
        $this->prisma = $prismaService->getClient();
    }

    public function index()
    {
        $etudiants = $this->prisma->eSBTPEtudiant->findMany([
            'include' => [
                'user' => true,
                'classe' => true,
                'inscriptions' => true
            ]
        ]);
        
        return view('esbtp.etudiants.index', compact('etudiants'));
    }
}
```

## Migrations

- Les migrations doivent être versionées et nommées de manière descriptive
- Chaque migration doit être atomique (une seule responsabilité)
- Inclure des méthodes `up()` et `down()` fonctionnelles
- Utiliser les types de colonnes appropriés pour les données
- Définir les contraintes d'intégrité (clés étrangères, index)
- Commenter le code des migrations pour expliquer les choix de conception