---
description: Workflow de Développement ESBTP
globs: 
alwaysApply: false
---
Ce document décrit le workflow complet pour le développement, les tests et le déploiement de l'application ESBTP.

## Installation et Configuration de l'Environnement Local

### Prérequis

- PHP 8.1 ou supérieur
- Composer
- Node.js et npm/Yarn
- MySQL ou MariaDB
- Git
- XAMPP, WAMP, LAMP ou Laragon (recommandé)
- Éditeur de code (VSCode recommandé avec les extensions PHP, Laravel, etc.)

### Étapes d'Installation

1. **Cloner le dépôt Git**

```bash
git clone https://github.com/[organisation]/ESBTP-yAKRO.git
cd ESBTP-yAKRO
```

2. **Installer les dépendances PHP**

```bash
composer install
```

3. **Installer les dépendances JavaScript**

```bash
npm install
# ou avec Yarn
yarn
```

4. **Configurer l'environnement**

```bash
cp .env.example .env
php artisan key:generate
```

5. **Configurer la base de données**

Modifier le fichier `.env` pour configurer la connexion à la base de données :

```
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=esbtp
DB_USERNAME=root
DB_PASSWORD=
```

6. **Exécuter les migrations et seeders**

```bash
php artisan migrate
php artisan db:seed
```

7. **Configurer Prisma**

```bash
npx prisma generate
```

8. **Lancer le serveur de développement**

```bash
php artisan serve
# Dans un autre terminal
npm run dev
# ou avec Yarn
yarn dev
```

## Workflow de Développement

### Gestion des Branches Git

- `main` : Branche principale, code de production stable
- `develop` : Branche de développement, intégration des fonctionnalités terminées
- `feature/[nom-feature]` : Branches pour les nouvelles fonctionnalités
- `bugfix/[nom-bug]` : Branches pour les corrections de bugs
- `hotfix/[nom-hotfix]` : Branches pour les correctifs urgents en production

### Cycle de Développement

1. **Création d'une nouvelle fonctionnalité**

```bash
git checkout develop
git pull origin develop
git checkout -b feature/nouvelle-fonctionnalite
```

2. **Développement et Tests Locaux**

- Implémenter la fonctionnalité
- Écrire les tests unitaires et d'intégration
- Exécuter les tests :
  ```bash
  php artisan test
  ```

3. **Commit et Push**

```bash
git add .
git commit -m "Description claire de la fonctionnalité"
git push origin feature/nouvelle-fonctionnalite
```

4. **Pull Request et Code Review**

- Créer une Pull Request vers la branche `develop`
- Demander une revue de code
- Apporter les modifications demandées
- Attendre l'approbation

5. **Fusion et Déploiement**

```bash
# Une fois la PR approuvée
git checkout develop
git merge --no-ff feature/nouvelle-fonctionnalite
git push origin develop
```

## Modification du Schéma de Base de Données

### Avec Laravel Migrations

1. **Créer une nouvelle migration**

```bash
php artisan make:migration create_esbtp_nom_table
# ou pour modifier une table existante
php artisan make:migration add_column_to_esbtp_nom_table
```

2. **Éditer le fichier de migration généré**

```php
public function up()
{
    Schema::create('esbtp_nom', function (Blueprint $table) {
        $table->id();
        $table->string('nom');
        $table->text('description')->nullable();
        $table->timestamps();
    });
}
```

3. **Exécuter la migration**

```bash
php artisan migrate
```

### Avec Prisma

1. **Modifier le schéma Prisma**

Éditer le fichier `schema.prisma` pour ajouter ou modifier des modèles.

2. **Générer la migration**

```bash
npx prisma migrate dev --name nom_de_la_migration
```

3. **Mettre à jour le client Prisma**

```bash
npx prisma generate
```

## Tests

### Types de Tests

1. **Tests Unitaires**
   - Testent des composants isolés (classes, méthodes)
   - Utilisent des mocks pour les dépendances

2. **Tests d'Intégration**
   - Testent les interactions entre composants
   - Utilisent une base de données de test (SQLite en mémoire)

3. **Tests de Fonctionnalités**
   - Testent le comportement de l'application de bout en bout
   - Simulent les interactions utilisateur

### Exécution des Tests

```bash
# Tous les tests
php artisan test

# Tests spécifiques
php artisan test --filter=NomDuTest

# Tests avec couverture de code
php artisan test --coverage
```

## Déploiement

### Préparation au Déploiement

1. **Optimiser pour la production**

```bash
# Optimiser l'application
php artisan optimize
php artisan config:cache
php artisan route:cache
php artisan view:cache

# Compiler les assets
npm run build
# ou avec Yarn
yarn build
```

2. **Vérifier les tests**

```bash
php artisan test
```

### Déploiement sur un Serveur Web Partagé

1. **Préparer les fichiers**

```bash
# Créer une archive de l'application
git archive --format=zip HEAD -o esbtp-deploy.zip
```

2. **Télécharger sur le serveur via FTP**

3. **Configurer l'environnement de production**

- Créer/modifier le fichier `.env` pour la production
- Configurer les variables d'environnement (base de données, mail, etc.)

4. **Exécuter les commandes d'installation**

```bash
composer install --no-dev --optimize-autoloader
php artisan migrate --force
php artisan optimize
```

### Déploiement sur un VPS

1. **Se connecter au serveur**

```bash
ssh utilisateur@adresse-serveur
```

2. **Cloner ou mettre à jour le dépôt**

```bash
git clone https://github.com/[organisation]/ESBTP-yAKRO.git
# ou si déjà cloné
cd ESBTP-yAKRO
git pull origin main
```

3. **Installer/mettre à jour les dépendances**

```bash
composer install --no-dev --optimize-autoloader
npm install --production
```

4. **Configurer l'environnement**

```bash
# Si nécessaire, mettre à jour le fichier .env
nano .env
```

5. **Exécuter les migrations et optimisations**

```bash
php artisan migrate --force
php artisan optimize
npm run build
```

6. **Configurer le serveur web (Nginx)**

```nginx
server {
    listen 80;
    server_name esbtp.example.com;
    root /var/www/esbtp/public;

    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";

    index index.php;

    charset utf-8;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    error_page 404 /index.php;

    location ~ \.php$ {
        fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        include fastcgi_params;
    }

    location ~ /\.(?!well-known).* {
        deny all;
    }
}
```

7. **Configurer SSL avec Certbot**

```bash
sudo certbot --nginx -d esbtp.example.com
```

### Maintenance et Mises à Jour

1. **Mode maintenance**

```bash
# Activer le mode maintenance
php artisan down

# Effectuer les mises à jour

# Désactiver le mode maintenance
php artisan up
```

2. **Mises à jour de sécurité**

```bash
composer update --no-dev
npm update --production
```

3. **Sauvegardes de la base de données**

```bash
# Exporter la base de données
mysqldump -u utilisateur -p nom_base > backup_$(date +%Y%m%d).sql
```

## Surveillance et Journalisation

### Configuration des Logs

- Les logs Laravel sont stockés dans `storage/logs/laravel.log`
- Configurer la rotation des logs dans `config/logging.php`

### Surveillance de l'Application

- Mettre en place une solution de surveillance (Sentry, Bugsnag, etc.)
- Configurer des alertes pour les erreurs critiques

## Gestion des Versions

### Versionnage Sémantique

Format : `MAJEUR.MINEUR.CORRECTIF`

- **MAJEUR** : Changements incompatibles avec les versions précédentes
- **MINEUR** : Ajout de fonctionnalités compatibles avec les versions précédentes
- **CORRECTIF** : Corrections de bugs compatibles avec les versions précédentes

### Création d'une Version

```bash
# Taguer une version
git tag -a v1.0.0 -m "Version 1.0.0"
git push origin v1.0.0
```

## Bonnes Pratiques

1. **Commits fréquents et atomiques**
   - Chaque commit doit représenter un changement logique
   - Messages de commit clairs et descriptifs

2. **Développement basé sur les tests**
   - Écrire les tests avant ou pendant le développement
   - Maintenir une couverture de code élevée

3. **Revue de code**
   - Toutes les modifications doivent être revues
   - Utiliser les Pull Requests pour faciliter les revues

4. **Documentation**
   - Maintenir une documentation à jour
   - Documenter les API, modèles et fonctionnalités complexes

5. **Intégration Continue**
   - Exécuter les tests automatiquement à chaque push
   - Vérifier le style de code et la qualité