---
description: Architecture Backend et Services ESBTP
globs:
alwaysApply: true
---
# Architecture Backend et Services ESBTP

## Organisation des Contrôleurs

Les contrôleurs ESBTP suivent une structure organisée par fonctionnalité :

```
app/Http/Controllers/
├── Auth/                       # Contrôleurs d'authentification
├── ESBTP/                      # Contrôleurs organisés par domaine
│   ├── EtudiantController.php  # Gestion des étudiants
│   ├── ParentController.php    # Gestion des parents
│   └── ...
├── ESBTPFiliereController.php  # Contrôleurs ESBTP principaux
├── ESBTPMatiereController.php
└── ...
```

## Convention de Nommage

- Les contrôleurs spécifiques à ESBTP sont préfixés par `ESBTP`
- Les noms de méthodes suivent les conventions Laravel :
  - `index()` : Liste des éléments
  - `create()` : Formulaire de création
  - `store()` : Enregistrement d'un nouvel élément
  - `show()` : Affichage d'un élément
  - `edit()` : Formulaire d'édition
  - `update()` : Mise à jour d'un élément
  - `destroy()` : Suppression d'un élément

## Architecture des Services

Pour les opérations métier complexes, utiliser des services :

```
app/Services/
├── ESBTP/
│   ├── BulletinService.php     # Génération des bulletins
│   ├── InscriptionService.php  # Gestion des inscriptions
│   ├── EmploiTempsService.php  # Gestion des emplois du temps
│   └── NotificationService.php # Envoi de notifications
└── ...
```

## Exemple de Contrôleur

Voici un exemple de structure pour un contrôleur ESBTP :

```php
<?php

namespace App\Http\Controllers;

use App\Models\ESBTPFiliere;
use Illuminate\Http\Request;
use App\Http\Requests\ESBTPFiliereRequest;

class ESBTPFiliereController extends Controller
{
    /**
     * Affiche la liste des filières
     */
    public function index()
    {
        // Vérification des autorisations
        $this->authorize('viewAny', ESBTPFiliere::class);

        $filieres = ESBTPFiliere::all();
        return view('esbtp.filieres.index', compact('filieres'));
    }

    /**
     * Affiche le formulaire de création
     */
    public function create()
    {
        $this->authorize('create', ESBTPFiliere::class);
        return view('esbtp.filieres.create');
    }

    /**
     * Enregistre une nouvelle filière
     */
    public function store(ESBTPFiliereRequest $request)
    {
        $this->authorize('create', ESBTPFiliere::class);

        $filiere = ESBTPFiliere::create($request->validated());

        return redirect()
            ->route('filieres.index')
            ->with('success', 'Filière créée avec succès.');
    }

    /**
     * Affiche les détails d'une filière
     */
    public function show(ESBTPFiliere $filiere)
    {
        $this->authorize('view', $filiere);
        return view('esbtp.filieres.show', compact('filiere'));
    }

    /**
     * Affiche le formulaire d'édition
     */
    public function edit(ESBTPFiliere $filiere)
    {
        $this->authorize('update', $filiere);
        return view('esbtp.filieres.edit', compact('filiere'));
    }

    /**
     * Met à jour une filière
     */
    public function update(ESBTPFiliereRequest $request, ESBTPFiliere $filiere)
    {
        $this->authorize('update', $filiere);

        $filiere->update($request->validated());

        return redirect()
            ->route('filieres.index')
            ->with('success', 'Filière mise à jour avec succès.');
    }

    /**
     * Supprime une filière
     */
    public function destroy(ESBTPFiliere $filiere)
    {
        $this->authorize('delete', $filiere);

        $filiere->delete();

        return redirect()
            ->route('filieres.index')
            ->with('success', 'Filière supprimée avec succès.');
    }
}
```

## Exemple de Service

Pour les opérations métier complexes, créer un service dédié :

```php
<?php

namespace App\Services\ESBTP;

use App\Models\ESBTPEtudiant;
use App\Models\ESBTPBulletin;
use App\Models\ESBTPEvaluation;
use App\Models\ESBTPNote;
use Illuminate\Support\Collection;

class BulletinService
{
    /**
     * Génère un bulletin pour un étudiant
     */
    public function genererBulletin(ESBTPEtudiant $etudiant, $classeId, $periodeId)
    {
        // Récupérer les notes de l'étudiant pour la période
        $notes = $this->getNotesPourPeriode($etudiant->id, $periodeId);

        // Grouper les notes par matière
        $notesParMatiere = $this->grouperNotesParMatiere($notes);

        // Calculer les moyennes par matière
        $moyennesParMatiere = $this->calculerMoyennesParMatiere($notesParMatiere);

        // Calculer la moyenne générale
        $moyenneGenerale = $this->calculerMoyenneGenerale($moyennesParMatiere);

        // Créer l'objet bulletin
        $bulletin = $this->creerBulletin($etudiant, $classeId, $periodeId, $moyenneGenerale);

        // Créer les détails du bulletin pour chaque matière
        $this->creerDetailsBulletin($bulletin, $moyennesParMatiere);

        return $bulletin;
    }

    /**
     * Récupère les notes d'un étudiant pour une période
     */
    private function getNotesPourPeriode($etudiantId, $periodeId)
    {
        return ESBTPNote::where('etudiant_id', $etudiantId)
            ->whereHas('evaluation', function($query) use ($periodeId) {
                $query->where('periode_id', $periodeId);
            })
            ->with(['evaluation', 'evaluation.matiere'])
            ->get();
    }

    /**
     * Groupe les notes par matière
     */
    private function grouperNotesParMatiere(Collection $notes)
    {
        return $notes->groupBy(function($note) {
            return $note->evaluation->matiere_id;
        });
    }

    /**
     * Calcule la moyenne pour chaque matière
     */
    private function calculerMoyennesParMatiere($notesParMatiere)
    {
        $moyennes = [];

        foreach ($notesParMatiere as $matiereId => $notes) {
            $sommeNotes = 0;
            $sommeCoefficients = 0;

            foreach ($notes as $note) {
                $coefficient = $note->evaluation->coefficient;
                $sommeNotes += $note->valeur * $coefficient;
                $sommeCoefficients += $coefficient;
            }

            $moyenne = $sommeCoefficients > 0 ? $sommeNotes / $sommeCoefficients : 0;

            $moyennes[$matiereId] = [
                'matiere' => $notes->first()->evaluation->matiere,
                'notes' => $notes,
                'moyenne' => $moyenne
            ];
        }

        return $moyennes;
    }

    /**
     * Calcule la moyenne générale
     */
    private function calculerMoyenneGenerale($moyennesParMatiere)
    {
        $sommeMoyennes = 0;
        $sommeCoefficients = 0;

        foreach ($moyennesParMatiere as $data) {
            $coefficient = $data['matiere']->coefficient;
            $sommeMoyennes += $data['moyenne'] * $coefficient;
            $sommeCoefficients += $coefficient;
        }

        return $sommeCoefficients > 0 ? $sommeMoyennes / $sommeCoefficients : 0;
    }

    /**
     * Crée un bulletin
     */
    private function creerBulletin(ESBTPEtudiant $etudiant, $classeId, $periodeId, $moyenneGenerale)
    {
        return ESBTPBulletin::create([
            'etudiant_id' => $etudiant->id,
            'classe_id' => $classeId,
            'periode_id' => $periodeId,
            'moyenne_generale' => $moyenneGenerale,
            'date_generation' => now()
        ]);
    }

    /**
     * Crée les détails du bulletin
     */
    private function creerDetailsBulletin(ESBTPBulletin $bulletin, $moyennesParMatiere)
    {
        foreach ($moyennesParMatiere as $data) {
            $bulletin->details()->create([
                'matiere_id' => $data['matiere']->id,
                'moyenne' => $data['moyenne'],
                'coefficient' => $data['matiere']->coefficient
            ]);
        }
    }
}
```

## Middleware personnalisés

Pour des vérifications spécifiques, créer des middleware personnalisés :

```php
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;

class CheckInstallation
{
    /**
     * Vérifie si l'application est installée
     */
    public function handle(Request $request, Closure $next)
    {
        // Si l'application n'est pas installée et qu'on n'est pas sur la route d'installation
        if (!$this->isInstalled() && !$request->is('install*')) {
            return redirect()->route('install.index');
        }

        // Si l'application est déjà installée et qu'on essaie d'accéder à l'installation
        if ($this->isInstalled() && $request->is('install*')) {
            return redirect()->route('login');
        }

        return $next($request);
    }

    /**
     * Vérifie si l'application est installée
     */
    private function isInstalled()
    {
        return file_exists(storage_path('installed'));
    }
}
```

## Validations

Utiliser des classes de requête dédiées pour la validation :

```php
<?php

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;

class ESBTPEtudiantRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize()
    {
        return true; // L'autorisation est gérée par les policies
    }

    /**
     * Get the validation rules that apply to the request.
     */
    public function rules()
    {
        $rules = [
            'nom' => 'required|string|max:100',
            'prenom' => 'required|string|max:255',
            'email' => 'required|email|max:255|unique:esbtp_etudiants,email',
            'telephone' => 'required|string|max:20',
            'date_naissance' => 'required|date',
            'genre' => 'required|in:homme,femme',
            'adresse' => 'required|string|max:255',
            'ville' => 'required|string|max:100',
            'commune' => 'required|string|max:100',
            'photo' => 'nullable|image|max:2048',
            'date_admission' => 'required|date',
            'classe_id' => 'required|exists:esbtp_classes,id',
            'parent_ids' => 'nullable|array',
            'parent_ids.*' => 'exists:esbtp_parents,id',
            'nouveaux_parents' => 'nullable|array',
            'nouveaux_parents.*.nom' => 'required_with:nouveaux_parents|string|max:100',
            'nouveaux_parents.*.prenom' => 'required_with:nouveaux_parents|string|max:255',
            'nouveaux_parents.*.email' => 'required_with:nouveaux_parents|email|max:255',
            'nouveaux_parents.*.telephone' => 'required_with:nouveaux_parents|string|max:20',
            'nouveaux_parents.*.relation' => 'required_with:nouveaux_parents|string|max:50',
        ];

        // Modification des règles pour la mise à jour
        if ($this->isMethod('PUT') || $this->isMethod('PATCH')) {
            $rules['email'] = 'required|email|max:255|unique:esbtp_etudiants,email,' . $this->etudiant->id;
        }

        return $rules;
    }

    /**
     * Get the error messages for the defined validation rules.
     */
    public function messages()
    {
        return [
            'nom.required' => 'Le nom est obligatoire.',
            'prenom.required' => 'Le prénom est obligatoire.',
            'email.required' => 'L\'email est obligatoire.',
            'email.email' => 'L\'email doit être une adresse valide.',
            'email.unique' => 'Cet email est déjà utilisé.',
            'telephone.required' => 'Le téléphone est obligatoire.',
            'date_naissance.required' => 'La date de naissance est obligatoire.',
            'genre.required' => 'Le genre est obligatoire.',
            'adresse.required' => 'L\'adresse est obligatoire.',
            'ville.required' => 'La ville est obligatoire.',
            'commune.required' => 'La commune est obligatoire.',
            'date_admission.required' => 'La date d\'admission est obligatoire.',
            'classe_id.required' => 'La classe est obligatoire.',
            'classe_id.exists' => 'La classe sélectionnée n\'existe pas.',
            // Messages pour les nouveaux parents
            'nouveaux_parents.*.nom.required_with' => 'Le nom du parent est obligatoire.',
            'nouveaux_parents.*.prenom.required_with' => 'Le prénom du parent est obligatoire.',
            'nouveaux_parents.*.email.required_with' => 'L\'email du parent est obligatoire.',
            'nouveaux_parents.*.email.email' => 'L\'email du parent doit être une adresse valide.',
            'nouveaux_parents.*.telephone.required_with' => 'Le téléphone du parent est obligatoire.',
            'nouveaux_parents.*.relation.required_with' => 'La relation avec l\'étudiant est obligatoire.',
        ];
    }
}
```

## Policies d'Autorisation

Utiliser des policies pour gérer les autorisations :

```php
<?php

namespace App\Policies;

use App\Models\ESBTPEtudiant;
use App\Models\User;
use Illuminate\Auth\Access\HandlesAuthorization;

class ESBTPEtudiantPolicy
{
    use HandlesAuthorization;

    /**
     * Détermine si l'utilisateur peut voir la liste des étudiants
     */
    public function viewAny(User $user)
    {
        return $user->hasPermissionTo('view students');
    }

    /**
     * Détermine si l'utilisateur peut voir un étudiant spécifique
     */
    public function view(User $user, ESBTPEtudiant $etudiant)
    {
        // Super Admin peut tout voir
        if ($user->hasRole('superAdmin')) {
            return true;
        }

        // Secrétaire peut voir tous les étudiants
        if ($user->hasRole('secretaire')) {
            return true;
        }

        // Étudiant peut seulement voir son propre profil
        if ($user->hasRole('etudiant')) {
            return $user->etudiant && $user->etudiant->id === $etudiant->id;
        }

        return false;
    }

    /**
     * Détermine si l'utilisateur peut créer des étudiants
     */
    public function create(User $user)
    {
        return $user->hasPermissionTo('create student');
    }

    /**
     * Détermine si l'utilisateur peut mettre à jour un étudiant
     */
    public function update(User $user, ESBTPEtudiant $etudiant)
    {
        // Super Admin et Secrétaire peuvent mettre à jour n'importe quel étudiant
        if ($user->hasRole(['superAdmin', 'secretaire'])) {
            return $user->hasPermissionTo('edit students');
        }

        return false;
    }

    /**
     * Détermine si l'utilisateur peut supprimer un étudiant
     */
    public function delete(User $user, ESBTPEtudiant $etudiant)
    {
        return $user->hasPermissionTo('delete students');
    }
}
```

## Routes API

Si l'application expose des API, suivre cette structure :

```php
// routes/api.php
Route::prefix('api')->middleware('auth:api')->group(function () {
    Route::prefix('esbtp')->group(function () {
        // Routes pour les filières
        Route::apiResource('filieres', 'API\ESBTPFiliereController');

        // Routes pour les étudiants
        Route::apiResource('etudiants', 'API\ESBTPEtudiantController');

        // Routes pour les évaluations
        Route::apiResource('evaluations', 'API\ESBTPEvaluationController');

        // Routes pour les notes
        Route::get('etudiants/{etudiant}/notes', 'API\ESBTPNoteController@notesEtudiant');
        Route::get('matieres/{matiere}/notes', 'API\ESBTPNoteController@notesMatiere');

        // Routes pour les bulletins
        Route::get('etudiants/{etudiant}/bulletins', 'API\ESBTPBulletinController@bulletinsEtudiant');
        Route::get('bulletins/{bulletin}/pdf', 'API\ESBTPBulletinController@genererPdf');
    });
});
```

## Exemple de Contrôleur API

```php
<?php

namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use App\Http\Resources\ESBTPEtudiantResource;
use App\Http\Resources\ESBTPEtudiantCollection;
use App\Models\ESBTPEtudiant;
use App\Http\Requests\ESBTPEtudiantRequest;
use Illuminate\Http\Response;

class ESBTPEtudiantController extends Controller
{
    /**
     * Liste des étudiants
     */
    public function index()
    {
        $this->authorize('viewAny', ESBTPEtudiant::class);

        $etudiants = ESBTPEtudiant::with(['classe', 'user'])->paginate();

        return new ESBTPEtudiantCollection($etudiants);
    }

    /**
     * Affiche un étudiant
     */
    public function show(ESBTPEtudiant $etudiant)
    {
        $this->authorize('view', $etudiant);

        $etudiant->load(['classe', 'user', 'parents', 'inscriptions']);

        return new ESBTPEtudiantResource($etudiant);
    }

    /**
     * Crée un nouvel étudiant
     */
    public function store(ESBTPEtudiantRequest $request)
    {
        $this->authorize('create', ESBTPEtudiant::class);

        $etudiant = ESBTPEtudiant::create($request->validated());

        return new ESBTPEtudiantResource($etudiant);
    }

    /**
     * Met à jour un étudiant
     */
    public function update(ESBTPEtudiantRequest $request, ESBTPEtudiant $etudiant)
    {
        $this->authorize('update', $etudiant);

        $etudiant->update($request->validated());

        return new ESBTPEtudiantResource($etudiant);
    }

    /**
     * Supprime un étudiant
     */
    public function destroy(ESBTPEtudiant $etudiant)
    {
        $this->authorize('delete', $etudiant);

        $etudiant->delete();

        return response()->json(null, Response::HTTP_NO_CONTENT);
    }
}
