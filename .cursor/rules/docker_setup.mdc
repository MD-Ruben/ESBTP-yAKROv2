---
description: Configuration Docker pour ESBTP
globs: 
alwaysApply: false
---
Ce document détaille la configuration Docker pour le projet ESBTP, fournissant un environnement de développement cohérent et portable, ainsi que des instructions pour le déploiement en production.

## Aperçu

L'utilisation de Docker pour ESBTP offre plusieurs avantages:

1. **Environnement de développement uniforme** pour tous les développeurs
2. **Isolation des dépendances** pour éviter les conflits
3. **Déploiement simplifié** sur différents environnements
4. **Configuration cohérente** entre développement, test et production

## Structure Docker

```
ESBTP/
├── docker/
│   ├── php/
│   │   ├── Dockerfile
│   │   └── php.ini
│   ├── nginx/
│   │   ├── Dockerfile
│   │   └── esbtp.conf
│   └── mysql/
│       └── my.cnf
├── docker-compose.yml
├── docker-compose.prod.yml
└── docker-install.sh
```

## Docker Compose

Le fichier `docker-compose.yml` définit les services suivants:

```yaml
version: '3.8'

services:
  # PHP (Application Laravel)
  app:
    build:
      context: ./docker/php
    volumes:
      - ./:/var/www/html
    depends_on:
      - mysql
    networks:
      - esbtp-network

  # Serveur web Nginx
  web:
    build:
      context: ./docker/nginx
    ports:
      - "80:80"
    volumes:
      - ./:/var/www/html
      - ./docker/nginx/esbtp.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app
    networks:
      - esbtp-network

  # Base de données MySQL
  mysql:
    image: mysql:8.0
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - esbtp-mysql-data:/var/lib/mysql
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    networks:
      - esbtp-network

  # Service Node.js pour le front-end (compilation des assets)
  node:
    image: node:16
    volumes:
      - ./:/var/www/html
    working_dir: /var/www/html
    command: bash -c "npm install && npm run dev"
    networks:
      - esbtp-network

networks:
  esbtp-network:

volumes:
  esbtp-mysql-data:
```

## Conteneur PHP (Laravel)

Le Dockerfile pour PHP:

```dockerfile
FROM php:8.1-fpm

# Installer les dépendances système
RUN apt-get update && apt-get install -y \
    git \
    curl \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    zip \
    unzip

# Installer les extensions PHP
RUN docker-php-ext-install pdo_mysql mbstring exif pcntl bcmath gd

# Installer Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Définir le répertoire de travail
WORKDIR /var/www/html

# Copier les fichiers de l'application
COPY . /var/www/html

# Définir les permissions
RUN chown -R www-data:www-data /var/www/html/storage /var/www/html/bootstrap/cache

# Exposer le port 9000 pour PHP-FPM
EXPOSE 9000

CMD ["php-fpm"]
```

## Installation et Configuration

### Étapes d'installation pour le développement

1. **Cloner le dépôt ESBTP**
   ```bash
   git clone https://github.com/votre-organisation/ESBTP.git
   cd ESBTP
   ```

2. **Créer le fichier .env**
   ```bash
   cp .env.example .env
   ```

3. **Configurer les variables d'environnement dans .env**
   ```
   DB_CONNECTION=mysql
   DB_HOST=mysql
   DB_PORT=3306
   DB_DATABASE=esbtp
   DB_USERNAME=esbtp
   DB_PASSWORD=password
   ```

4. **Démarrer les conteneurs Docker**
   ```bash
   docker-compose up -d
   ```

5. **Installer les dépendances et générer la clé d'application**
   ```bash
   docker-compose exec app composer install
   docker-compose exec app php artisan key:generate
   ```

6. **Exécuter les migrations**
   ```bash
   docker-compose exec app php artisan migrate
   ```

7. **Compiler les assets front-end**
   ```bash
   docker-compose exec node npm install
   docker-compose exec node npm run dev
   ```

8. **Accéder à l'application**
   Ouvrir http://localhost dans un navigateur

### Script d'Automatisation

Un script `docker-install.sh` est fourni pour automatiser l'installation:

```bash
#!/bin/bash

# Script d'installation Docker pour ESBTP
echo "Installation de ESBTP avec Docker..."

# Vérifier si Docker est installé
if ! command -v docker &> /dev/null; then
    echo "Docker n'est pas installé. Veuillez l'installer avant de continuer."
    exit 1
fi

# Vérifier si Docker Compose est installé
if ! command -v docker-compose &> /dev/null; then
    echo "Docker Compose n'est pas installé. Veuillez l'installer avant de continuer."
    exit 1
fi

# Créer le fichier .env s'il n'existe pas
if [ ! -f .env ]; then
    echo "Création du fichier .env..."
    cp .env.example .env
    
    # Générer un mot de passe aléatoire pour la base de données
    DB_PASSWORD=$(openssl rand -base64 12)
    
    # Mettre à jour les variables d'environnement
    sed -i "s/DB_HOST=.*/DB_HOST=mysql/" .env
    sed -i "s/DB_DATABASE=.*/DB_DATABASE=esbtp/" .env
    sed -i "s/DB_USERNAME=.*/DB_USERNAME=esbtp/" .env
    sed -i "s/DB_PASSWORD=.*/DB_PASSWORD=$DB_PASSWORD/" .env
fi

# Démarrer les conteneurs Docker
echo "Démarrage des conteneurs Docker..."
docker-compose up -d

# Installer les dépendances PHP
echo "Installation des dépendances PHP..."
docker-compose exec -T app composer install

# Générer la clé de l'application
echo "Génération de la clé d'application..."
docker-compose exec -T app php artisan key:generate

# Exécuter les migrations
echo "Exécution des migrations..."
docker-compose exec -T app php artisan migrate

# Installer les dépendances Node.js et compiler les assets
echo "Installation des dépendances Node.js et compilation des assets..."
docker-compose exec -T node npm install
docker-compose exec -T node npm run dev

echo "Installation terminée! Accédez à l'application via http://localhost"
```

## Intégration avec le Processus d'Installation ESBTP

Le processus d'installation Docker doit être intégré au système d'installation existant de ESBTP:

1. **Configuration de la base de données**: Lors de l'étape de configuration de la base de données dans l'assistant d'installation, utiliser les paramètres du conteneur MySQL (hôte: `mysql`, port: `3306`).

2. **Exécution des migrations**: Exécuter les migrations à l'intérieur du conteneur Docker à l'aide de la commande:
   ```bash
   docker-compose exec app php artisan migrate
   ```

3. **Création du compte administrateur**: Effectuer cette étape comme d'habitude, en utilisant l'interface d'installation ESBTP.

## Commandes Docker Utiles

### Commandes de Développement Quotidiennes

```bash
# Démarrer tous les conteneurs
docker-compose up -d

# Arrêter tous les conteneurs
docker-compose down

# Voir les logs
docker-compose logs -f

# Exécuter une commande Artisan
docker-compose exec app php artisan <commande>

# Exécuter une commande Composer
docker-compose exec app composer <commande>

# Exécuter une commande npm
docker-compose exec node npm <commande>
```

### Commandes pour la Gestion de la Base de Données

```bash
# Accéder à MySQL
docker-compose exec mysql mysql -u esbtp -p

# Sauvegarder la base de données
docker-compose exec mysql mysqldump -u root -p esbtp > backup.sql

# Restaurer la base de données
cat backup.sql | docker-compose exec -T mysql mysql -u root -p esbtp
```

## Déploiement en Production

Pour le déploiement en production, les ajustements suivants sont nécessaires:

1. **Créer un fichier `docker-compose.prod.yml`** avec des configurations optimisées pour la production:
   - Désactiver les volumes de développement
   - Configurer les limites de ressources
   - Régler les paramètres de performance
   - Activer les fonctionnalités de sécurité supplémentaires

2. **Optimiser les images Docker**:
   - Utiliser des images multi-étapes pour réduire la taille
   - Pré-compiler les assets dans l'image
   - Optimiser les couches Docker

3. **Configuration de l'environnement**:
   - Définir `APP_ENV=production`
   - Configurer une clé d'application sécurisée
   - Désactiver le mode debug

4. **Déployer avec**:
   ```bash
   docker-compose -f docker-compose.prod.yml up -d
   ```

## Bonnes Pratiques Docker

1. **Utiliser des images légères** comme Alpine lorsque possible
2. **Sécuriser les conteneurs**:
   - Ne pas exécuter en tant que root
   - Limiter les privilèges
   - Scanner les vulnérabilités
3. **Optimiser les performances**:
   - Configurer les limites de mémoire
   - Utiliser des volumes pour les données persistantes
   - Configurer le logging
4. **Intégration CI/CD**:
   - Construire les images dans le pipeline CI/CD
   - Tester les images avant déploiement
   - Utiliser le versionnement pour les images 
