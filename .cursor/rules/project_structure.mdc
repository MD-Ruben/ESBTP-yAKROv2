---
description: Structure du Projet ESBTP
globs: 
alwaysApply: false
---
## Organisation en Couches

L'application ESBTP suit une architecture en couches:

- **Models** (`app/Models/`) : Représentent les entités métier et les relations entre elles
- **Controllers** (`app/Http/Controllers/`) : Gèrent les requêtes HTTP et coordonnent les opérations
- **Services** (`app/Services/`) : Contiennent la logique métier complexe
- **Views** (`resources/views/`) : Templates Blade pour le rendu des pages
- **Migrations** (`database/migrations/`) : Définissent la structure de la base de données
- **Routes** (`routes/`) : Définissent les points d'entrée de l'API et des pages web

## Conventions de Nommage

- **Contrôleurs ESBTP** : Préfixés par `ESBTP` (ex: `ESBTPFiliereController`)
- **Modèles ESBTP** : Préfixés par `ESBTP` (ex: `ESBTPFiliere`) 
- **Tables de base de données** : Préfixées par `esbtp_` (ex: `esbtp_filieres`)
- **Vues** : Organisées par fonctionnalité dans `resources/views/esbtp/`

## Organisation des Dossiers

- `/app` : Code principal de l'application
  - `/Http/Controllers` : Contrôleurs Laravel
  - `/Models` : Modèles Eloquent
  - `/Services` : Services métier
  - `/Providers` : Service providers Laravel
  - `/Helpers` : Fonctions utilitaires
- `/database`
  - `/migrations` : Migrations de base de données
  - `/seeders` : Seeders pour peupler la base de données
- `/resources` 
  - `/views` : Templates Blade
  - `/js` : Code JavaScript
  - `/css` : Feuilles de style
- `/routes` : Définitions des routes
- `/public` : Fichiers accessibles publiquement

## Patterns de Conception

- **MVC** : Séparation entre modèles, vues et contrôleurs
- **Repository Pattern** : Pour l'accès aux données (si implémenté)
- **Service Layer** : Encapsulation de la logique métier
- **Dependency Injection** : Pour le couplage faible entre composants

## Règles Générales

- Les contrôleurs doivent être minces, délégant la logique métier aux services
- Les modèles doivent encapsuler les règles métier liées aux données
- Les vues doivent être modulaires et réutilisables
- Les routes doivent suivre les conventions REST quand c'est possible
- Les noms des classes doivent être en PascalCase
- Les noms des méthodes et variables doivent être en camelCase
- Les noms des tables doivent être en snake_case
- Préfixer tous les éléments spécifiques à ESBTP pour éviter les conflits