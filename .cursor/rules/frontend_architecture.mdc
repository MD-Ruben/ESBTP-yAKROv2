---
description: Architecture Frontend ESBTP
globs: 
alwaysApply: false
---


## Structure des Vues

L'application ESBTP utilise le moteur de templates Blade de Laravel avec une architecture modulaire :

### Organisation des Dossiers

```
resources/
├── views/
│   ├── layouts/           # Layouts principaux
│   │   ├── app.blade.php  # Layout principal avec sidebar
│   │   └── auth.blade.php # Layout pour l'authentification
│   ├── esbtp/             # Vues spécifiques à ESBTP
│   │   ├── filieres/      # CRUD pour les filières
│   │   ├── formations/    # CRUD pour les formations
│   │   ├── niveaux-etudes/ # CRUD pour les niveaux d'étude
│   │   ├── classes/       # CRUD pour les classes
│   │   ├── matieres/      # CRUD pour les matières
│   │   ├── etudiants/     # CRUD pour les étudiants
│   │   ├── parents/       # CRUD pour les parents
│   │   ├── inscriptions/  # CRUD pour les inscriptions
│   │   ├── evaluations/   # CRUD pour les évaluations
│   │   ├── notes/         # CRUD pour les notes
│   │   ├── bulletins/     # CRUD pour les bulletins
│   │   ├── emplois-temps/ # CRUD pour les emplois du temps
│   │   ├── attendances/   # CRUD pour les présences
│   │   └── annonces/      # CRUD pour les annonces
│   └── install/           # Vues pour l'installation
├── js/                    # JavaScript
└── css/                   # CSS et SCSS
```

### Conventions de Nommage

Pour chaque fonctionnalité CRUD dans `resources/views/esbtp/[fonctionnalité]/` :
- `index.blade.php` : Liste des éléments
- `create.blade.php` : Formulaire de création
- `edit.blade.php` : Formulaire d'édition
- `show.blade.php` : Affichage détaillé

### Layout Principal (app.blade.php)

Le layout principal contient :
- L'en-tête avec le logo et le nom de l'utilisateur connecté
- La barre latérale (sidebar) avec les menus adaptés au rôle de l'utilisateur
- Le contenu principal
- Le pied de page

## Composants Frontend

### Composants Blade

Utiliser des composants Blade pour les éléments réutilisables :

```
resources/
└── views/
    └── components/
        ├── forms/
        │   ├── text-input.blade.php
        │   ├── select.blade.php
        │   └── ...
        ├── tables/
        │   ├── data-table.blade.php
        │   └── ...
        ├── modals/
        │   ├── confirmation.blade.php
        │   ├── selection.blade.php
        │   └── ...
        └── ...
```

Exemple d'un composant de formulaire :

```php
<!-- resources/views/components/forms/text-input.blade.php -->
@props(['name', 'label', 'value' => '', 'required' => false])

<div class="form-group">
    <label for="{{ $name }}">{{ $label }} @if($required) <span class="text-danger">*</span> @endif</label>
    <input 
        type="text" 
        name="{{ $name }}" 
        id="{{ $name }}" 
        value="{{ old($name, $value) }}" 
        class="form-control @error($name) is-invalid @enderror" 
        {{ $required ? 'required' : '' }}
        {{ $attributes }}
    >
    @error($name)
        <div class="invalid-feedback">{{ $message }}</div>
    @enderror
</div>
```

### JavaScript et Interactivité

#### Organisation du JavaScript

```
resources/
└── js/
    ├── app.js         # Point d'entrée
    ├── bootstrap.js   # Bootstrap JS et dépendances
    └── components/    # Composants JS spécifiques
        ├── modal.js   # Gestionnaire de modaux
        ├── datatable.js # Configuration des tableaux de données
        ├── forms.js   # Validation côté client
        └── ...
```

#### Bonnes Pratiques JavaScript

- Utiliser des modules ES6 pour organiser le code
- Éviter la pollution du scope global
- Préférer les fonctions nommées aux fonctions anonymes
- Utiliser des commentaires pour documenter les fonctions complexes
- Gérer correctement les événements avec des délégations quand c'est possible

## Styles et Design

### Organisation CSS

```
resources/
└── css/
    ├── app.css        # Point d'entrée CSS
    └── components/    # Styles par composant
        ├── sidebar.css
        ├── forms.css
        ├── tables.css
        └── ...
```

### Utilisation de Bootstrap

- Étendre les composants Bootstrap au lieu de les redéfinir
- Utiliser les variables Bootstrap pour la cohérence
- Customiser via Sass quand c'est nécessaire

## Modals et Interactions Complexes

### Modals pour la Sélection

Utiliser des modals pour les interactions complexes comme la sélection de classes ou de parents :

```html
<!-- Exemple de modal pour sélectionner une classe -->
<div class="modal fade" id="classeSelectionModal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Sélectionner une Classe</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <!-- Filtres -->
                <div class="row mb-3">
                    <div class="col-md-3">
                        <select class="form-control" id="filtreFiliere">
                            <option value="">Toutes les filières</option>
                            <!-- Options filières -->
                        </select>
                    </div>
                    <!-- Autres filtres... -->
                </div>
                
                <!-- Tableau des classes -->
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Filière</th>
                            <th>Formation</th>
                            <th>Niveau</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Contenu dynamique -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
```

## Tableaux de Données

Utiliser des tableaux interactifs pour les listes d'éléments :

```html
<!-- Exemple de tableau de données pour les étudiants -->
<table class="table table-striped datatable">
    <thead>
        <tr>
            <th>ID</th>
            <th>Matricule</th>
            <th>Nom & Prénom</th>
            <th>Classe</th>
            <th>Email</th>
            <th>Téléphone</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach($etudiants as $etudiant)
        <tr>
            <td>{{ $etudiant->id }}</td>
            <td>{{ $etudiant->matricule }}</td>
            <td>{{ $etudiant->nom }} {{ $etudiant->prenom }}</td>
            <td>{{ $etudiant->classe->nom_complet }}</td>
            <td>{{ $etudiant->email }}</td>
            <td>{{ $etudiant->telephone }}</td>
            <td>
                <a href="{{ route('etudiants.show', $etudiant->id) }}" class="btn btn-sm btn-info">
                    <i class="fas fa-eye"></i>
                </a>
                <a href="{{ route('etudiants.edit', $etudiant->id) }}" class="btn btn-sm btn-primary">
                    <i class="fas fa-edit"></i>
                </a>
                <form action="{{ route('etudiants.destroy', $etudiant->id) }}" method="POST" class="d-inline">
                    @csrf
                    @method('DELETE')
                    <button type="submit" class="btn btn-sm btn-danger" onclick="return confirm('Êtes-vous sûr?')">
                        <i class="fas fa-trash"></i>
                    </button>
                </form>
            </td>
        </tr>
        @endforeach
    </tbody>
</table>
```

## Formulaires

### Structure Standardisée des Formulaires

```html
<!-- Exemple de formulaire pour créer un étudiant -->
<form action="{{ route('etudiants.store') }}" method="POST" enctype="multipart/form-data">
    @csrf
    
    <div class="card">
        <div class="card-header">
            <h4>Informations de l'Étudiant</h4>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <x-forms.text-input name="nom" label="Nom" required />
                </div>
                <div class="col-md-6">
                    <x-forms.text-input name="prenom" label="Prénom(s)" required />
                </div>
            </div>
            
            <!-- Autres champs... -->
            
            <div class="form-group">
                <label>Classe</label>
                <div class="input-group">
                    <input type="text" id="classe_display" class="form-control" readonly />
                    <input type="hidden" name="classe_id" id="classe_id" />
                    <div class="input-group-append">
                        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#classeSelectionModal">
                            Sélectionner
                        </button>
                    </div>
                </div>
            </div>
            
            <!-- Section pour les parents... -->
        </div>
        <div class="card-footer">
            <button type="submit" class="btn btn-primary">Enregistrer</button>
            <a href="{{ route('etudiants.index') }}" class="btn btn-secondary">Annuler</a>
        </div>
    </div>
</form>
```

## Adaptation au Rôle de l'Utilisateur

### Sidebar Dynamique

La barre latérale doit s'adapter au rôle de l'utilisateur connecté :

```php
<!-- resources/views/layouts/sidebar.blade.php -->
<aside class="main-sidebar sidebar-dark-primary">
    <!-- Logo et en-tête... -->
    
    <div class="sidebar">
        <nav class="mt-2">
            <ul class="nav nav-pills nav-sidebar flex-column">
                <!-- Éléments communs à tous les rôles -->
                <li class="nav-item">
                    <a href="{{ route('dashboard') }}" class="nav-link {{ request()->routeIs('dashboard') ? 'active' : '' }}">
                        <i class="nav-icon fas fa-tachometer-alt"></i>
                        <p>Tableau de bord</p>
                    </a>
                </li>
                
                <!-- Éléments spécifiques pour SuperAdmin -->
                @if(auth()->user()->hasRole('superAdmin'))
                    <li class="nav-item">
                        <a href="{{ route('filieres.index') }}" class="nav-link {{ request()->routeIs('filieres.*') ? 'active' : '' }}">
                            <i class="nav-icon fas fa-sitemap"></i>
                            <p>Filières</p>
                        </a>
                    </li>
                    <!-- Autres éléments pour SuperAdmin... -->
                @endif
                
                <!-- Éléments spécifiques pour Secrétaire -->
                @if(auth()->user()->hasRole('secretaire'))
                    <li class="nav-item">
                        <a href="{{ route('etudiants.index') }}" class="nav-link {{ request()->routeIs('etudiants.*') ? 'active' : '' }}">
                            <i class="nav-icon fas fa-user-graduate"></i>
                            <p>Étudiants</p>
                        </a>
                    </li>
                    <!-- Autres éléments pour Secrétaire... -->
                @endif
                
                <!-- Éléments spécifiques pour Étudiant -->
                @if(auth()->user()->hasRole('etudiant'))
                    <li class="nav-item">
                        <a href="{{ route('etudiant.profil') }}" class="nav-link {{ request()->routeIs('etudiant.profil') ? 'active' : '' }}">
                            <i class="nav-icon fas fa-user"></i>
                            <p>Mon Profil</p>
                        </a>
                    </li>
                    <!-- Autres éléments pour Étudiant... -->
                @endif
            </ul>
        </nav>
    </div>
</aside>
```