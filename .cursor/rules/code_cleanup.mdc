---
description: Règles de Maintenance et Nettoyage du Code
globs: 
alwaysApply: false
---
## Identification des Fichiers et Dossiers Inutiles

Avant de supprimer des fichiers ou dossiers, utilisez les critères suivants pour identifier les éléments inutiles:

### Critères d'identification
- **Fichiers non référencés**: Fichiers qui ne sont pas importés, inclus ou utilisés ailleurs dans le code
- **Code commenté**: Blocs de code importants qui sont commentés depuis longtemps
- **Contrôleurs orphelins**: Contrôleurs qui ne sont liés à aucune route
- **Vues non utilisées**: Fichiers de vue qui ne sont jamais renderisés
- **Migrations en double**: Migrations redondantes ou obsolètes
- **Assets inutilisés**: Images, JavaScript ou CSS qui ne sont pas chargés dans l'application
- **Dépendances obsolètes**: Packages ou bibliothèques qui ne sont plus utilisés

## Règles pour la Suppression de Fichiers

Avant de supprimer des fichiers du projet, suivez ces règles:

1. **Créer un backup**: Toujours sauvegarder les fichiers avant de les supprimer
2. **Procéder par étapes**: Ne pas supprimer trop de fichiers à la fois
3. **Vérifier les dépendances**: S'assurer qu'aucun fichier important ne dépend du fichier à supprimer
4. **Tester après suppression**: Vérifier que l'application fonctionne correctement après chaque suppression
5. **Documenter les suppressions**: Noter quels fichiers ont été supprimés et pourquoi

## Règles pour Déplacer et Réorganiser les Fichiers

1. **Maintenir la cohérence structurelle**: S'assurer que la nouvelle structure respecte les conventions Laravel
2. **Mettre à jour les imports/namespaces**: Mettre à jour tous les imports et namespaces après déplacement
3. **Mettre à jour les références de routes**: Vérifier que les routes référencent correctement les contrôleurs déplacés
4. **Documenter les changements structurels**: Documenter les modifications importantes de structure

## Conventions de Renommage

1. **Controllers**: `NomEntitéController.php` (ex: `ESBTPFiliereController.php`)
2. **Models**: `NomEntité.php` (ex: `ESBTPFiliere.php`)
3. **Migrations**: `YYYY_MM_DD_HHMMSS_create_nom_table_table.php`
4. **Tables**: Toujours au pluriel et en snake_case (ex: `esbtp_filieres`)
5. **Vues**: organisation hiérarchique `/dossier/sous-dossier/action.blade.php` (ex: `/esbtp/filieres/index.blade.php`)

### Après tout renommage
- Mettre à jour toutes les références au nom précédent
- Vérifier les imports et namespaces
- Tester que les fonctionnalités fonctionnent toujours

## Règles pour la Refactorisation du Code

Refactoriser le code dans les cas suivants:

1. **Code dupliqué**: Extraire le code répété dans des fonctions ou classes réutilisables
2. **Méthodes trop longues**: Décomposer les méthodes de plus de 50 lignes en méthodes plus petites
3. **Classes trop complexes**: Diviser les classes avec trop de responsabilités
4. **Couplage élevé**: Réduire les dépendances entre classes et modules
5. **Dépendances obsolètes**: Mettre à jour ou remplacer les dépendances obsolètes

## Nettoyage des Migrations

1. **Migrations non déployées**: Les migrations qui n'ont pas encore été déployées peuvent être consolidées
2. **Migrations déjà déployées**: Ne jamais modifier les migrations qui ont déjà été exécutées
3. **Tables temporaires**: Nettoyer les tables créées pour des tests ou du développement temporaire

## Optimisation des Performances

Identifier les problèmes de performance et nettoyer:

1. **Requêtes N+1**: Utiliser le eager loading avec `with()` pour éviter les requêtes multiples
2. **Mise en cache**: Implémenter la mise en cache pour les opérations coûteuses
3. **Pagination**: Utiliser la pagination pour les listes longues
4. **Lazy loading**: Charger les assets et scripts JavaScript de manière asynchrone
5. **Optimisation des images**: Compresser et redimensionner les images pour des chargements plus rapides

## Maintenance Régulière du Code

1. **Variables inutilisées**: Supprimer les variables définies mais jamais utilisées
2. **Code mort**: Éliminer le code qui n'est jamais exécuté
3. **Commentaires obsolètes**: Mettre à jour ou supprimer les commentaires qui ne sont plus pertinents
4. **Dépendances**: Mettre à jour régulièrement les dépendances pour raisons de sécurité et performance

## Checklist de Nettoyage du Code

Avant de finaliser un nettoyage important, vérifier que:

- [ ] Tous les tests unitaires passent
- [ ] Les fonctionnalités principales fonctionnent correctement
- [ ] Les performances sont au moins aussi bonnes qu'avant
- [ ] Toutes les références ont été mises à jour
- [ ] La documentation a été révisée pour refléter les changements

## Automatisation du Nettoyage

Utiliser des outils automatisés pour faciliter le nettoyage:

1. **PHP CS Fixer**: Pour formater le code selon les standards
2. **PHPStan**: Pour détecter les erreurs statiques
3. **Laravel Pint**: Outil de formatage spécifique à Laravel
4. **Dead Code Detector**: Pour identifier le code mort
5. **Laravel IDE Helper**: Pour améliorer l'auto-complétion et la détection d'erreurs 