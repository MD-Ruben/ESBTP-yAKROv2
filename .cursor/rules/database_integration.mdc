---
description: Intégration de Base de Données avec Prisma
globs:
alwaysApply: true
---
---
description: Intégration de Base de Données avec Prisma
globs:
alwaysApply: true
---
Ce document détaille l'intégration de Prisma ORM avec Laravel dans l'application ESBTP, fournissant des directives pour la définition du schéma, les migrations, et l'utilisation du client Prisma.

## Vue d'Ensemble

L'application ESBTP utilise une double approche pour la gestion de base de données:
- **Laravel Eloquent** pour les interactions standard avec la base de données
- **Prisma ORM** pour les cas d'utilisation avancés nécessitant des requêtes complexes, des relations multiples, ou des transactions critiques

Cette architecture hybride permet de bénéficier des avantages des deux systèmes:
- Interface familière d'Eloquent pour les opérations CRUD simples
- Typage fort et sécurité accrue avec Prisma pour les opérations complexes
- Performances optimisées pour les requêtes intensives

## Architecture d'Intégration

```
ESBTP Application
├── Laravel Framework
│   ├── Eloquent ORM (Utilisé pour)
│   │   ├── Migrations standard Laravel
│   │   ├── Relations simples
│   │   └── Opérations CRUD basiques
│   └── Prisma Integration (Utilisé pour)
│       ├── Schéma Prisma (schema.prisma)
│       ├── Client Prisma (PrismaClient)
│       ├── Migrations Prisma
│       └── Services Prisma personnalisés
```

## Configuration de Prisma

### Installation et Configuration Initiale

```bash
# Installation des dépendances Prisma
npm install -D prisma
npm install @prisma/client

# Initialisation de Prisma
npx prisma init
```

### Fichier .env

```
# Configuration de la base de données pour Prisma
DATABASE_URL="mysql://root:password@localhost:3306/esbtp_db"
```

### Configuration du Service Provider

Créer un service provider pour Prisma:

```php
<?php
// app/Providers/PrismaServiceProvider.php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;

class PrismaServiceProvider extends ServiceProvider
{
    public function register()
    {
        $this->app->singleton('prisma', function ($app) {
            // Initialiser le client Prisma via Node.js ou via une API HTTP
            // Ceci est un exemple simplifié, l'implémentation réelle dépendra de votre approche
            return new \App\Services\Prisma\PrismaClient();
        });
    }

    public function boot()
    {
        //
    }
}
```

Enregistrer le provider dans `config/app.php`:

```php
'providers' => [
    // Autres providers
    App\Providers\PrismaServiceProvider::class,
],

'aliases' => [
    // Autres aliases
    'Prisma' => App\Facades\Prisma::class,
]
```

## Schéma Prisma

Le fichier `schema.prisma` définit la structure de la base de données pour Prisma.

### Configuration Générale

```prisma
// schema.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
```

### Définition des Modèles

Voici comment les principales entités de l'application ESBTP sont définies dans le schéma Prisma:

```prisma
// Utilisateurs et Authentification
model User {
  id                Int              @id @default(autoincrement())
  name              String
  email             String           @unique
  password          String
  email_verified_at DateTime?
  remember_token    String?          @db.VarChar(100)
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  roles             RoleOnUser[]
  etudiant          ESBTPEtudiant?
}

model Role {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  guard_name String
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  users      RoleOnUser[]
}

model RoleOnUser {
  user      User     @relation(fields: [user_id], references: [id])
  user_id   Int
  role      Role     @relation(fields: [role_id], references: [id])
  role_id   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id([user_id, role_id])
}

// Structure Académique
model ESBTPFiliere {
  id          Int           @id @default(autoincrement())
  nom         String
  description String?       @db.Text
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  classes     ESBTPClasse[]
}



model ESBTPNiveauEtude {
  id           Int           @id @default(autoincrement())
  nom          String
  duree_semaines Int
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  classes      ESBTPClasse[]
}

model ESBTPClasse {
  id               Int               @id @default(autoincrement())
  nom              String
  filiere_id       Int
  formation_id     Int
  niveau_etude_id  Int
  annee_universitaire String
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  filiere          ESBTPFiliere      @relation(fields: [filiere_id], references: [id])
  niveau_etude     ESBTPNiveauEtude  @relation(fields: [niveau_etude_id], references: [id])
  etudiants        ESBTPEtudiant[]
  emploisDuTemps   ESBTPEmploiDuTemps[]
  matieres         ESBTPMatiereOnClasse[]
  evaluations      ESBTPEvaluation[]
}

// Étudiants et Parents
model ESBTPEtudiant {
  id               Int               @id @default(autoincrement())
  matricule        String            @unique
  nom              String
  prenom           String
  date_naissance   DateTime
  genre            String
  adresse          String
  telephone        String
  email            String            @unique
  photo_profile    String?
  date_admission   DateTime
  classe_id        Int
  user_id          Int?              @unique
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  classe           ESBTPClasse       @relation(fields: [classe_id], references: [id])
  user             User?             @relation(fields: [user_id], references: [id])
  parents          ESBTPParentOnEtudiant[]
  notes            ESBTPNote[]
}

model ESBTPParent {
  id               Int               @id @default(autoincrement())
  nom              String
  prenom           String
  telephone        String
  email            String?
  adresse          String?
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  etudiants        ESBTPParentOnEtudiant[]
}

model ESBTPParentOnEtudiant {
  etudiant_id      Int
  parent_id        Int
  relation         String
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  etudiant         ESBTPEtudiant     @relation(fields: [etudiant_id], references: [id])
  parent           ESBTPParent       @relation(fields: [parent_id], references: [id])

  @@id([etudiant_id, parent_id])
}

// Gestion Pédagogique
model ESBTPMatiere {
  id               Int               @id @default(autoincrement())
  nom              String
  description      String?           @db.Text
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  classes          ESBTPMatiereOnClasse[]
}

model ESBTPMatiereOnClasse {
  matiere_id       Int
  classe_id        Int
  coefficient      Float             @default(1)
  volume_horaire   Int?
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  matiere          ESBTPMatiere      @relation(fields: [matiere_id], references: [id])
  classe           ESBTPClasse       @relation(fields: [classe_id], references: [id])

  @@id([matiere_id, classe_id])
}

model ESBTPEmploiDuTemps {
  id               Int               @id @default(autoincrement())
  classe_id        Int
  jour             String
  heure_debut      String
  heure_fin        String
  matiere_id       Int
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  classe           ESBTPClasse       @relation(fields: [classe_id], references: [id])
}

model ESBTPEvaluation {
  id               Int               @id @default(autoincrement())
  type             String            // 'examen', 'quiz', 'devoir', etc.
  description      String?           @db.Text
  date             DateTime
  classe_id        Int
  matiere_id       Int
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  classe           ESBTPClasse       @relation(fields: [classe_id], references: [id])
  notes            ESBTPNote[]
}

model ESBTPNote {
  id               Int               @id @default(autoincrement())
  evaluation_id    Int
  etudiant_id      Int
  valeur           Float
  observation      String?           @db.Text
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  evaluation       ESBTPEvaluation   @relation(fields: [evaluation_id], references: [id])
  etudiant         ESBTPEtudiant     @relation(fields: [etudiant_id], references: [id])
}

// Communication
model ESBTPAnnonce {
  id               Int               @id @default(autoincrement())
  titre            String
  contenu          String            @db.Text
  date_publication DateTime          @default(now())
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  destinataires    ESBTPAnnonceDestinataire[]
}

model ESBTPAnnonceDestinataire {
  annonce_id       Int
  destinataire_type String           // 'tous', 'classe', 'etudiant'
  destinataire_id  Int?              // ID de la classe ou de l'étudiant, null si 'tous'
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  annonce          ESBTPAnnonce      @relation(fields: [annonce_id], references: [id])

  @@id([annonce_id, destinataire_type, destinataire_id])
}

model ESBTPPresence {
  id               Int               @id @default(autoincrement())
  etudiant_id      Int
  date             DateTime
  matiere_id       Int
  statut           String            // 'present', 'absent', 'retard'
  observation      String?           @db.Text
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
}
```

## Migrations avec Prisma

### Générer et Appliquer des Migrations

```bash
# Générer une migration
npx prisma migrate dev --name init_schema

# Appliquer des migrations en production
npx prisma migrate deploy
```

### Synchronisation avec Les Migrations Laravel

Pour maintenir la cohérence entre les migrations Laravel et Prisma:

1. Créer d'abord les migrations Laravel standard
2. Générer le schéma Prisma à partir de la base de données ou manuellement
3. Utiliser les migrations Prisma pour les changements spécifiques à Prisma

## Utilisation du Client Prisma

### Service Wrapper Laravel

```php
<?php
// app/Services/Prisma/PrismaClient.php

namespace App\Services\Prisma;

class PrismaClient
{
    protected $client;

    public function __construct()
    {
        // Initialiser le client Prisma (via une approche spécifique à votre environnement)
        // Ceci est un exemple conceptuel
        $this->client = new \PrismaClient();
    }

    public function __call($method, $arguments)
    {
        return $this->client->$method(...$arguments);
    }
}
```

### Façade pour Faciliter l'Accès

```php
<?php
// app/Facades/Prisma.php

namespace App\Facades;

use Illuminate\Support\Facades\Facade;

class Prisma extends Facade
{
    protected static function getFacadeAccessor()
    {
        return 'prisma';
    }
}
```

### Exemple d'Utilisation dans un Service

```php
<?php
// app/Services/EtudiantService.php

namespace App\Services;

use App\Facades\Prisma;
use App\Models\ESBTPEtudiant;

class EtudiantService
{
    // Méthode utilisant Eloquent pour les opérations simples
    public function createEtudiant(array $data)
    {
        return ESBTPEtudiant::create($data);
    }

    // Méthode utilisant Prisma pour des requêtes complexes
    public function getEtudiantWithComplexRelations($id)
    {
        return Prisma::eSBTPEtudiant()->findUnique([
            'where' => [
                'id' => $id
            ],
            'include' => [
                'classe' => [
                    'include' => [
                        'filiere' => true,
                        'formation' => true,
                        'niveau_etude' => true
                    ]
                ],
                'parents' => [
                    'include' => [
                        'parent' => true
                    ]
                ],
                'notes' => [
                    'include' => [
                        'evaluation' => true
                    ]
                ]
            ]
        ]);
    }

    // Méthode utilisant Prisma pour des transactions complexes
    public function transferEtudiantWithHistory($etudiantId, $newClasseId)
    {
        return Prisma::$transaction([
            Prisma::eSBTPEtudiant()->update([
                'where' => [
                    'id' => $etudiantId
                ],
                'data' => [
                    'classe_id' => $newClasseId,
                    'historique' => [
                        'create' => [
                            'action' => 'transfert',
                            'details' => json_encode([
                                'ancienne_classe' => $etudiantId,
                                'nouvelle_classe' => $newClasseId,
                                'date' => now()->toDateTimeString()
                            ])
                        ]
                    ]
                ]
            ])
        ]);
    }
}
```

## Génération du Client Prisma

Pour générer le client Prisma après la mise à jour du schéma:

```bash
npx prisma generate
```

Le client est généralement généré dans `node_modules/.prisma/client`, mais il peut être configuré pour être généré ailleurs.

## Bonnes Pratiques

### 1. Séparation des Responsabilités

- Utiliser Eloquent pour les opérations CRUD simples
- Utiliser Prisma pour:
  - Requêtes complexes avec plusieurs niveaux de relations
  - Transactions critiques nécessitant une atomicité garantie
  - Opérations de masse nécessitant des performances optimales

### 2. Cohérence des Schémas

- Maintenir une cohérence entre les migrations Laravel et le schéma Prisma
- Documenter les changements dans les deux systèmes
- Envisager des outils de synchronisation automatique

### 3. Architecture des Services

- Encapsuler la logique Prisma dans des services dédiés
- Séparer les préoccupations entre l'accès aux données et la logique métier
- Injecter les dépendances Prisma plutôt que d'utiliser la façade directement dans les contrôleurs

### 4. Gestion des Transactions

- Utiliser les transactions Prisma pour les opérations impliquant plusieurs modèles
- S'assurer que les erreurs sont correctement capturées et que les transactions sont annulées en cas d'échec

```php
try {
    $result = Prisma::$transaction([
        // Opérations Prisma
    ]);
    return $result;
} catch (\Exception $e) {
    Log::error('Transaction Prisma échouée: ' . $e->getMessage());
    throw $e;
}
```

### 5. Performances

- Utiliser les méthodes de requête optimisées de Prisma
- Ne sélectionner que les champs nécessaires avec `select`
- Limiter les includes aux relations strictement nécessaires
- Utiliser la pagination pour les grands ensembles de données

```php
$etudiants = Prisma::eSBTPEtudiant()->findMany([
    'select' => [
        'id' => true,
        'nom' => true,
        'prenom' => true,
        // Seulement les champs nécessaires
    ],
    'where' => [
        'classe_id' => $classeId
    ],
    'skip' => ($page - 1) * $perPage,
    'take' => $perPage,
    'orderBy' => [
        'nom' => 'asc'
    ]
]);
```

## Outils et Extensions

### 1. Prisma Studio

Interface graphique pour explorer et modifier les données:

```bash
npx prisma studio
```

### 2. Intégration IDE

- Extension VS Code pour Prisma
- Coloration syntaxique et auto-complétion pour `schema.prisma`
- Linting et validation du schéma

### 3. Scripts Utilitaires

Script pour générer des modèles Eloquent à partir du schéma Prisma:

```php
// scripts/generate-eloquent-models.php
// À implémenter selon les besoins spécifiques du projet
```

## Dépannage et Résolution de Problèmes

### Problèmes Courants et Solutions

1. **Erreur de connexion à la base de données**
   - Vérifier les paramètres de connexion dans `.env`
   - S'assurer que la base de données est accessible
   - Vérifier que l'utilisateur a les permissions nécessaires

2. **Erreurs de migration**
   - Examiner les journaux pour les détails spécifiques
   - Réinitialiser les migrations si nécessaire: `npx prisma migrate reset`
   - Vérifier les contraintes de clé étrangère

3. **Performances lentes**
   - Analyser les requêtes avec `explain`
   - Optimiser les index sur les colonnes fréquemment utilisées
   - Limiter les relations incluses

### Outils de Diagnostic

- **Prisma CLI**: `npx prisma --help`
- **Validation du schéma**: `npx prisma validate`
- **Formatage du schéma**: `npx prisma format`
- **Vérification de la base de données**: `npx prisma db pull`

## Ressources et Documentation

- [Documentation Officielle de Prisma](mdc:https:/www.prisma.io/docs)
- [Prisma avec Laravel (Guides Communautaires)](mdc:https:/github.com/prisma/prisma-examples)
- [Optimisation des Performances avec Prisma](mdc:https:/www.prisma.io/docs/concepts/components/prisma-client/query-optimization-performance)
- [Meilleures Pratiques pour le Schéma Prisma](mdc:https:/www.prisma.io/docs/concepts/components/prisma-schema/best-practices)
