# Stratégie de Test ESBTP

Ce document définit l'approche complète pour tester l'application ESBTP, garantissant la qualité et la fiabilité du code.

## Principes de Test

- **Tests Automatisés** : Privilégier les tests automatisés par rapport aux tests manuels.
- **Pyramide de Test** : Suivre une pyramide de tests avec plus de tests unitaires que de tests d'intégration et plus de tests d'intégration que de tests de bout en bout.
- **Tests comme Documentation** : Les tests doivent servir de documentation sur le comportement attendu du système.
- **Couverture de Code** : Viser une couverture de test adéquate, particulièrement pour la logique métier critique.
- **Intégration Continue** : Exécuter les tests à chaque push ou pull request.

## Types de Tests

### Tests Unitaires

Tests qui vérifient des unités isolées de code (typiquement des classes ou des méthodes).

#### Outils
- PHPUnit pour les tests PHP
- Jest pour les tests JavaScript

#### Exemples

```php
class EtudiantServiceTest extends TestCase
{
    /** @test */
    public function generer_matricule_cree_un_format_valide()
    {
        // Arrange
        $etudiantService = new EtudiantService();
        $etudiant = new ESBTPEtudiant([
            'nom' => 'Dupont',
            'prenom' => 'Jean',
            'date_naissance' => '2000-01-01'
        ]);
        
        // Act
        $matricule = $etudiantService->genererMatricule($etudiant);
        
        // Assert
        $this->assertMatchesRegularExpression('/^ESBTP-\d{4}-[A-Z]{2}\d{2}$/', $matricule);
    }
    
    /** @test */
    public function calcul_moyenne_retourne_valeur_correcte()
    {
        // Arrange
        $etudiantService = new EtudiantService();
        $notes = [
            ['valeur' => 12, 'coefficient' => 2],
            ['valeur' => 14, 'coefficient' => 3],
            ['valeur' => 10, 'coefficient' => 1]
        ];
        
        // Act
        $moyenne = $etudiantService->calculerMoyenne($notes);
        
        // Assert
        $this->assertEquals(12.67, $moyenne, '', 0.01);
    }
}
```

### Tests d'Intégration

Tests qui vérifient que plusieurs composants fonctionnent ensemble correctement.

#### Outils
- PHPUnit avec des traits Laravel comme DatabaseTransactions
- Mocks pour les services externes

#### Exemples

```php
class InscriptionServiceTest extends TestCase
{
    use DatabaseTransactions;
    
    /** @test */
    public function inscrire_etudiant_cree_un_compte_utilisateur()
    {
        // Arrange
        $inscriptionService = app(InscriptionService::class);
        $donneesEtudiant = [
            'nom' => 'Dupont',
            'prenom' => 'Jean',
            'email' => 'jean.dupont@example.com',
            'date_naissance' => '2000-01-01',
            'genre' => 'homme',
            'adresse' => 'Abidjan, Cocody',
            'telephone' => '+225 01 02 030 405'
        ];
        $classe = ESBTPClasse::factory()->create();
        
        // Act
        $etudiant = $inscriptionService->inscrireEtudiant($donneesEtudiant, $classe->id);
        
        // Assert
        $this->assertDatabaseHas('esbtp_etudiants', [
            'nom' => 'Dupont',
            'classe_id' => $classe->id
        ]);
        
        $this->assertDatabaseHas('users', [
            'email' => 'jean.dupont@example.com'
        ]);
        
        $user = User::where('email', 'jean.dupont@example.com')->first();
        $this->assertTrue($user->hasRole('etudiant'));
    }
}
```

### Tests Feature (Fonctionnels)

Tests qui vérifient le comportement de fonctionnalités complètes, souvent via des requêtes HTTP.

#### Outils
- PHPUnit avec les helpers de test HTTP de Laravel

#### Exemples

```php
class EtudiantControllerTest extends TestCase
{
    use DatabaseTransactions;
    
    /** @test */
    public function superadmin_peut_voir_liste_etudiants()
    {
        // Arrange
        $user = User::factory()->create();
        $user->assignRole('superAdmin');
        
        ESBTPEtudiant::factory()->count(3)->create();
        
        // Act
        $response = $this->actingAs($user)
                          ->get(route('etudiants.index'));
        
        // Assert
        $response->assertStatus(200);
        $response->assertViewHas('etudiants');
        $this->assertCount(3, $response->viewData('etudiants'));
    }
    
    /** @test */
    public function etudiant_ne_peut_pas_acceder_liste_etudiants()
    {
        // Arrange
        $user = User::factory()->create();
        $user->assignRole('etudiant');
        
        // Act
        $response = $this->actingAs($user)
                          ->get(route('etudiants.index'));
        
        // Assert
        $response->assertStatus(403);
    }
}
```

### Tests de l'Interface Utilisateur

Tests qui interagissent avec l'application comme un utilisateur réel.

#### Outils
- Laravel Dusk (basé sur Chrome WebDriver)
- Cypress comme alternative

#### Exemples

```php
class InscriptionTest extends DuskTestCase
{
    /** @test */
    public function utilisateur_peut_inscrire_nouvel_etudiant()
    {
        $this->browse(function (Browser $browser) {
            $browser->loginAs(User::role('superAdmin')->first())
                    ->visit(route('etudiants.create'))
                    ->type('nom', 'Dupont')
                    ->type('prenom', 'Jean')
                    ->type('email', 'jean.dupont@example.com')
                    ->select('classe_id', ESBTPClasse::first()->id)
                    ->press('Inscrire')
                    ->assertPathIs('/etudiants')
                    ->assertSee('L\'étudiant a été inscrit avec succès');
                    
            $this->assertDatabaseHas('esbtp_etudiants', [
                'nom' => 'Dupont',
                'prenom' => 'Jean'
            ]);
        });
    }
}
```

### Tests API

Tests qui vérifient les points d'accès de l'API.

#### Outils
- PHPUnit avec les helpers de test HTTP de Laravel
- Postman pour les tests manuels et automatisés

#### Exemples

```php
class EtudiantApiTest extends TestCase
{
    use DatabaseTransactions;
    
    /** @test */
    public function peut_recuperer_liste_etudiants_via_api()
    {
        // Arrange
        $user = User::factory()->create();
        $user->assignRole('superAdmin');
        
        Sanctum::actingAs($user, ['*']);
        
        ESBTPEtudiant::factory()->count(3)->create();
        
        // Act
        $response = $this->getJson('/api/etudiants');
        
        // Assert
        $response->assertStatus(200)
                 ->assertJsonCount(3, 'data');
    }
    
    /** @test */
    public function peut_creer_etudiant_via_api()
    {
        // Arrange
        $user = User::factory()->create();
        $user->assignRole('superAdmin');
        
        Sanctum::actingAs($user, ['*']);
        
        $classe = ESBTPClasse::factory()->create();
        $donnees = [
            'nom' => 'Dupont',
            'prenom' => 'Jean',
            'email' => 'jean.dupont@example.com',
            'classe_id' => $classe->id
            // Autres champs requis
        ];
        
        // Act
        $response = $this->postJson('/api/etudiants', $donnees);
        
        // Assert
        $response->assertStatus(201)
                 ->assertJsonPath('data.nom', 'Dupont');
                 
        $this->assertDatabaseHas('esbtp_etudiants', [
            'nom' => 'Dupont',
            'prenom' => 'Jean'
        ]);
    }
}
```

## Structure des Tests

```
tests/
├── Unit/
│   ├── ESBTP/
│   │   ├── Services/
│   │   │   ├── EtudiantServiceTest.php
│   │   │   ├── ClasseServiceTest.php
│   │   │   └── ...
│   │   ├── Models/
│   │   │   ├── ESBTPEtudiantTest.php
│   │   │   └── ...
│   │   └── ...
├── Feature/
│   ├── ESBTP/
│   │   ├── Controllers/
│   │   │   ├── ESBTPEtudiantControllerTest.php
│   │   │   └── ...
│   │   ├── API/
│   │   │   ├── EtudiantApiTest.php
│   │   │   └── ...
│   │   └── ...
├── Browser/
│   ├── ESBTP/
│   │   ├── InscriptionTest.php
│   │   ├── BulletinGenerationTest.php
│   │   └── ...
└── TestCase.php
```

## Données de Test

### Factories

Utiliser des factories Laravel pour générer des données de test réalistes et cohérentes.

```php
class ESBTPEtudiantFactory extends Factory
{
    protected $model = ESBTPEtudiant::class;
    
    public function definition()
    {
        return [
            'nom' => $this->faker->lastName,
            'prenom' => $this->faker->firstName,
            'date_naissance' => $this->faker->date('Y-m-d', '-18 years'),
            'email' => $this->faker->unique()->safeEmail,
            'telephone' => '+225 ' . $this->faker->numerify('## ## ### ###'),
            'genre' => $this->faker->randomElement(['homme', 'femme']),
            'adresse' => $this->faker->city . ', ' . $this->faker->streetName,
            'matricule' => 'ESBTP-' . $this->faker->unique()->numerify('####-##'),
            'classe_id' => ESBTPClasse::factory(),
            'created_at' => now(),
            'updated_at' => now()
        ];
    }
    
    public function premierCycle()
    {
        return $this->state(function (array $attributes) {
            return [
                'classe_id' => ESBTPClasse::where('niveau_etude_id', 1)->first()->id ?? ESBTPClasse::factory()->create(['niveau_etude_id' => 1])->id
            ];
        });
    }
}
```

### Seeders de Test

Créer des seeders spécifiques aux tests pour préparer l'environnement.

```php
class TestDatabaseSeeder extends Seeder
{
    public function run()
    {
        // Créer des données de base
        $this->call([
            ESBTPFiliereSeeder::class,
            ESBTPFormationSeeder::class,
            ESBTPNiveauEtudeSeeder::class,
            ESBTPClasseSeeder::class,
            // ...
        ]);
        
        // Créer un super admin pour les tests
        $superAdmin = User::factory()->create([
            'name' => 'Super Admin',
            'email' => 'superadmin@esbtp.test'
        ]);
        $superAdmin->assignRole('superAdmin');
        
        // Créer un secrétaire pour les tests
        $secretaire = User::factory()->create([
            'name' => 'Secrétaire',
            'email' => 'secretaire@esbtp.test'
        ]);
        $secretaire->assignRole('secretaire');
        
        // Créer quelques étudiants pour les tests
        ESBTPEtudiant::factory()
            ->count(10)
            ->create()
            ->each(function ($etudiant) {
                $user = User::factory()->create([
                    'name' => $etudiant->prenom . ' ' . $etudiant->nom,
                    'email' => $etudiant->email
                ]);
                $user->assignRole('etudiant');
                // Lier l'utilisateur à l'étudiant
                $etudiant->user_id = $user->id;
                $etudiant->save();
            });
    }
}
```

## Mocking

### Services Externes

Simuler des services externes ou des APIs tierces.

```php
class PaiementServiceTest extends TestCase
{
    /** @test */
    public function verifier_statut_paiement_retourne_correct_resultat()
    {
        // Arrange
        $mockHttpClient = $this->mock(HttpClient::class);
        $mockHttpClient->shouldReceive('get')
            ->once()
            ->with('https://api.paiement.com/status/123456')
            ->andReturn(new Response(200, [], json_encode([
                'status' => 'paid',
                'amount' => 50000,
                'date' => '2023-06-15'
            ])));
            
        $paiementService = new PaiementService($mockHttpClient);
        
        // Act
        $resultat = $paiementService->verifierStatutPaiement('123456');
        
        // Assert
        $this->assertEquals('paid', $resultat['status']);
        $this->assertEquals(50000, $resultat['amount']);
    }
}
```

### Dépendances Internes

Simuler des dépendances internes pour isoler le code testé.

```php
class BulletinServiceTest extends TestCase
{
    /** @test */
    public function generer_bulletin_calcule_moyenne_generale()
    {
        // Arrange
        $mockEvaluationService = $this->mock(EvaluationService::class);
        $mockEvaluationService->shouldReceive('getNotesEtudiant')
            ->once()
            ->with(1, 1) // etudiant_id, classe_id
            ->andReturn([
                ['matiere' => 'Mathématiques', 'coefficient' => 4, 'note' => 14],
                ['matiere' => 'Physique', 'coefficient' => 3, 'note' => 12],
                ['matiere' => 'Chimie', 'coefficient' => 2, 'note' => 16]
            ]);
            
        $bulletinService = new BulletinService($mockEvaluationService);
        
        // Act
        $bulletin = $bulletinService->genererBulletin(1, 1); // etudiant_id, classe_id
        
        // Assert
        $this->assertEquals(13.78, $bulletin['moyenne_generale'], '', 0.01);
    }
}
```

## Exécution des Tests

### Commandes

```bash
# Exécuter tous les tests
php artisan test

# Exécuter un groupe spécifique de tests
php artisan test --group=etudiant

# Exécuter un fichier de test spécifique
php artisan test tests/Feature/ESBTP/Controllers/ESBTPEtudiantControllerTest.php

# Exécuter un test spécifique
php artisan test --filter=test_etudiant_peut_voir_ses_notes

# Mesurer la couverture de code
XDEBUG_MODE=coverage php artisan test --coverage
```

### Environnement de Test

```php
// phpunit.xml
<php>
    <env name="APP_ENV" value="testing"/>
    <env name="DB_CONNECTION" value="sqlite"/>
    <env name="DB_DATABASE" value=":memory:"/>
    <env name="CACHE_DRIVER" value="array"/>
    <env name="SESSION_DRIVER" value="array"/>
    <env name="QUEUE_CONNECTION" value="sync"/>
    <env name="MAIL_MAILER" value="array"/>
</php>
```

## Intégration Continue

### GitHub Actions

```yaml
# .github/workflows/test.yml
name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  tests:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: esbtp_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, dom, fileinfo, mysql
          coverage: xdebug
      
      - name: Copy .env
        run: cp .env.example .env.testing
      
      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-interaction
      
      - name: Generate key
        run: php artisan key:generate --env=testing
      
      - name: Set directory permissions
        run: chmod -R 777 storage bootstrap/cache
      
      - name: Run migrations
        run: php artisan migrate --env=testing
        
      - name: Run tests
        run: php artisan test --env=testing
```

## Bonnes Pratiques

### Principes FIRST

- **Fast**: Les tests doivent s'exécuter rapidement
- **Isolated**: Les tests ne doivent pas dépendre les uns des autres
- **Repeatable**: Les tests doivent produire le même résultat à chaque exécution
- **Self-validating**: Les tests doivent déterminer automatiquement si le test a réussi ou échoué
- **Timely**: Les tests doivent être écrits au bon moment (idéalement avant le code de production - TDD)

### Test-Driven Development (TDD)

1. Écrire un test qui échoue
2. Écrire le code minimal pour faire passer le test
3. Refactoriser le code tout en gardant les tests verts

```php
// 1. Écrire un test qui échoue
/** @test */
public function calcul_moyenne_retourne_valeur_correcte()
{
    $etudiantService = new EtudiantService();
    $notes = [
        ['valeur' => 12, 'coefficient' => 2],
        ['valeur' => 14, 'coefficient' => 3],
        ['valeur' => 10, 'coefficient' => 1]
    ];
    
    $moyenne = $etudiantService->calculerMoyenne($notes);
    
    $this->assertEquals(12.67, $moyenne, '', 0.01);
}

// 2. Code minimal pour faire passer le test
public function calculerMoyenne(array $notes): float
{
    $total = 0;
    $totalCoefficients = 0;
    
    foreach ($notes as $note) {
        $total += $note['valeur'] * $note['coefficient'];
        $totalCoefficients += $note['coefficient'];
    }
    
    return $totalCoefficients > 0 ? $total / $totalCoefficients : 0;
}

// 3. Refactoriser
public function calculerMoyenne(array $notes): float
{
    if (empty($notes)) {
        return 0;
    }
    
    $totalPondere = array_sum(array_map(function($note) {
        return $note['valeur'] * $note['coefficient'];
    }, $notes));
    
    $totalCoefficients = array_sum(array_column($notes, 'coefficient'));
    
    return $totalCoefficients > 0 ? $totalPondere / $totalCoefficients : 0;
}
```

### Faux Positifs et Faux Négatifs

- **Éviter les Faux Positifs**: S'assurer que les tests échouent pour les bonnes raisons
- **Éviter les Faux Négatifs**: S'assurer que les tests ne passent pas quand ils devraient échouer

### Nommage Descriptif

Utiliser des noms de tests clairs et descriptifs qui expliquent le comportement attendu.

```php
// Bon nommage
public function test_etudiant_avec_moyenne_superieure_a_10_est_considere_comme_admis()

// Mauvais nommage
public function test_admis()
```

## Maintenance des Tests

### Refactoring des Tests

- Extraire les configurations communes dans des méthodes helper ou des classes de base
- Utiliser des traits pour les fonctionnalités partagées
- Revoir régulièrement les tests pour éliminer la duplication

### Tests de Régression

Écrire des tests pour les bugs identifiés avant de les corriger.

```php
/** @test */
public function etudiant_sans_notes_a_moyenne_zero()
{
    // Ce test vérifie que le bug #123 est résolu
    // où un étudiant sans notes générait une division par zéro
    
    $etudiantService = new EtudiantService();
    $notes = [];
    
    $moyenne = $etudiantService->calculerMoyenne($notes);
    
    $this->assertEquals(0, $moyenne);
}
```

## Stratégie de Déploiement

### Tests de Préproduction

- Exécuter une suite de tests complète avant chaque déploiement
- Vérifier les migrations avec un jeu de données réaliste

### Tests de Production

- Surveiller les métriques après déploiement
- Utiliser des tests de smoke après déploiement pour vérifier les fonctionnalités critiques

## Ressources et Formation

### Documentation

- [Documentation PHPUnit](https://phpunit.de/documentation.html)
- [Guide de test Laravel](https://laravel.com/docs/testing)
- [Laravel Dusk](https://laravel.com/docs/dusk)

### Outils de Qualité

- [PHPStan](https://phpstan.org/)
- [PHP_CodeSniffer](https://github.com/squizlabs/PHP_CodeSniffer)
- [Laravel Pint](https://laravel.com/docs/pint)

### Formations Recommandées

- Test-Driven Laravel
- Laracasts Testing Series
- Advanced PHPUnit Techniques 