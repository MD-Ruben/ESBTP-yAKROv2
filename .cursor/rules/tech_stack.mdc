---
description: Technologies qui doit être utilisées dans ESBTP
globs: 
alwaysApply: false
---

## Stack Technique Principal

### Backend

- **Laravel** : Framework PHP principal (version 9.x ou 10.x)
  - Routing avancé avec groupes et middleware
  - Validation de formulaires robuste
  - ORM Eloquent pour les requêtes de base
  - Système de migration de base de données
  - Système d'événements et de jobs en file d'attente
  - Container d'injection de dépendances

- **PHP** : Version 8.1 ou supérieure
  - Utilisation des fonctionnalités modernes (types, attributs, enums)
  - Optimisé pour les performances

- **Prisma** : ORM pour l'accès à la base de données
  - Modélisation du schéma de données en code
  - Migrations automatisées et typesafe
  - Requêtes complexes et efficaces
  - Support pour les relations et l'intégrité référentielle

- **Spatie/laravel-permission** : Gestion des rôles et permissions
  - Définition de rôles (superAdmin, secretaire, etudiant)
  - Attribution de permissions granulaires
  - Contrôle d'accès basé sur les rôles et permissions

### Frontend

- **Blade** : Moteur de templates Laravel
  - Layouts et composants réutilisables
  - Directives conditionnelles et boucles
  - Composants avec slots et attributs
  - Inclusion de sous-vues et partials

- **JavaScript** : Pour les interactions côté client
  - Validation de formulaires
  - Requêtes AJAX pour les interactions dynamiques
  - Chargement asynchrone de données

- **jQuery** : Bibliothèque JavaScript pour simplifier les manipulations DOM
  - Sélection et manipulation d'éléments
  - Gestion d'événements
  - Animations et effets

- **Bootstrap 5** : Framework CSS pour l'interface utilisateur
  - Grille responsive
  - Composants d'interface (modals, cartes, tableaux)
  - Utilitaires CSS
  - Système de navigation et menus

- **Select2** : Pour les sélecteurs avancés
  - Recherche dans les listes déroulantes
  - Sélection multiple avec tags
  - Chargement dynamique des données

- **DataTables** : Pour les tableaux interactifs
  - Pagination côté client et serveur
  - Tri et filtrage
  - Export de données (CSV, Excel, PDF)

- **Chart.js** : Pour les visualisations de données
  - Graphiques dynamiques
  - Représentations statistiques pour les dashboards

## Base de Données et Stockage

- **MySQL/MariaDB** : Système de gestion de base de données principal
  - Stockage des données structurées
  - Support des transactions et contraintes d'intégrité
  - Optimisé pour les performances en production

- **SQLite** : Pour les environnements de développement et tests
  - Configuration simplifiée
  - Base de données en fichier unique

- **Prisma Schema** : Définition déclarative du schéma de données
  - Modèles et relations typés
  - Migrations générées automatiquement
  - Garantie de cohérence entre le code et la base de données

## Outils de Développement et Build

- **Composer** : Gestionnaire de dépendances PHP
  - Installation et mise à jour des packages
  - Autoloading des classes

- **npm/Yarn** : Gestionnaires de paquets JavaScript
  - Gestion des dépendances frontend
  - Scripts de build et développement

- **Laravel Mix** : Pour la compilation des assets
  - Compilation de SCSS/CSS
  - Minification JavaScript
  - Versioning pour l'invalidation du cache
  - Hot Module Replacement en développement

- **Git** : Système de contrôle de versions
  - Gestion du code source
  - Branches pour les fonctionnalités
  - Flow de développement collaboratif

## Infrastructure et Déploiement

### Environnement de Développement Local

- **XAMPP/WAMP/LAMP/Laragon** : Stack Apache/MySQL/PHP
  - Configuration locale rapide
  - Environnement de développement isolé

- **Docker** (optionnel) : Conteneurisation
  - Environnement de développement reproductible
  - Services isolés (PHP, MySQL, Redis)

- **Artisan serve** : Serveur de développement intégré
  - Démarrage rapide du serveur de développement
  - Rechargement automatique du code

### Déploiement en Production

- **Hébergement Web** :
  - Serveur partagé ou VPS avec PHP 8.1+
  - MySQL/MariaDB
  - SSL pour HTTPS
  - Configuration du serveur web (Apache/Nginx)
  - Support pour les tâches cron

- **Processus de Déploiement** :
  - Déploiement automatisé via Git
  - Builds optimisés pour la production
  - Migration de base de données
  - Cache de configuration et de routes

## Intégration Détaillée de Prisma

### Configuration Initiale

1. Installation des dépendances :
   ```bash
   npm install prisma --save-dev
   npm install @prisma/client
   ```

2. Initialisation du schéma :
   ```bash
   npx prisma init
   ```

3. Configuration de la connexion à la base de données dans `.env` :
   ```
   DATABASE_URL="mysql://user:password@localhost:3306/esbtp"
   ```

### Définition du Schéma

Exemple de schéma Prisma pour ESBTP :

```prisma
// schema.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model ESBTPFiliere {
  id                Int             @id @default(autoincrement())
  nom               String
  description       String?
  active            Boolean         @default(true)
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  
  niveauxEtudes     ESBTPNiveauEtudeOnFilieres[]
  classes           ESBTPClasse[]
  
  @@map("esbtp_filieres")
}

model ESBTPFormation {
  id                Int             @id @default(autoincrement())
  nom               String
  description       String?
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  
  classes           ESBTPClasse[]
  
  @@map("esbtp_formations")
}

// Autres modèles...
```

### Intégration avec Laravel

1. Création d'un Service Provider pour Prisma :

```php
<?php
// app/Providers/PrismaServiceProvider.php
namespace App\Providers;

use Illuminate\Support\ServiceProvider;
use App\Services\PrismaService;

class PrismaServiceProvider extends ServiceProvider
{
    public function register()
    {
        $this->app->singleton(PrismaService::class, function ($app) {
            return new PrismaService();
        });
    }
}
```

2. Implémentation du Service Prisma :

```php
<?php
// app/Services/PrismaService.php
namespace App\Services;

class PrismaService
{
    protected $client;
    
    public function __construct()
    {
        // Initialisation du client Prisma
        $this->client = new \PrismaClient();
    }
    
    public function getClient()
    {
        return $this->client;
    }
    
    // Méthodes spécifiques pour les opérations courantes
    public function getFilieres($active = true)
    {
        return $this->client->eSBTPFiliere->findMany([
            'where' => [
                'active' => $active
            ],
            'orderBy' => [
                'nom' => 'asc'
            ]
        ]);
    }
    
    // Autres méthodes...
}
```

3. Utilisation dans les contrôleurs :

```php
<?php
// app/Http/Controllers/ESBTPFiliereController.php
namespace App\Http\Controllers;

use App\Services\PrismaService;
use Illuminate\Http\Request;

class ESBTPFiliereController extends Controller
{
    protected $prisma;
    
    public function __construct(PrismaService $prisma)
    {
        $this->prisma = $prisma;
    }
    
    public function index()
    {
        $filieres = $this->prisma->getFilieres();
        return view('esbtp.filieres.index', compact('filieres'));
    }
    
    // Autres méthodes...
}
```

### Migrations avec Prisma

1. Génération des migrations :
   ```bash
   npx prisma migrate dev --name init
   ```

2. Application des migrations en production :
   ```bash
   npx prisma migrate deploy
   ```

## Pratiques de Sécurité Avancées

- Authentification multi-facteurs (optionnel)
- Gestion des sessions sécurisée
- Protection contre les attaques CSRF, XSS et injections SQL
- Validation des entrées utilisateur côté client et serveur
- Journalisation des actions sensibles
- Chiffrement des données sensibles
- Audits de sécurité réguliers
- Mises à jour régulières des dépendances pour corriger les vulnérabilités 